# SCRIPT DEPLOIEMENT FINAL MELYIA v33.3 - VERSION CORRIG√âE
# Processus complet : Audit ‚Üí Build ‚Üí Deploy ‚Üí Validation
# R√©sout d√©finitivement les probl√®mes de synchronisation + correction syntaxe PowerShell

Write-Host "üöÄ D√âPLOIEMENT FINAL MELYIA v33.3 - CORRIG√â" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Green

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"  # Acc√©l√®re Invoke-WebRequest

function Write-StatusLog {
    param([string]$Message, [string]$Color = "Cyan")
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Test-BuildsExist {
    Write-StatusLog "üîç V√©rification des builds..." "Blue"
    
    $builds = @("dist/landing", "dist/app")
    foreach ($build in $builds) {
        if (-not (Test-Path $build)) {
            throw "Build manquant: $build"
        }
        
        $htmlFiles = Get-ChildItem "$build/*.html" -ErrorAction SilentlyContinue
        $assetsDir = Test-Path "$build/assets"
        
        if (-not $htmlFiles -or -not $assetsDir) {
            throw "Build incomplet: $build"
        }
        
        Write-StatusLog "‚úÖ Build valid√©: $build" "Green"
    }
}

function Test-ScriptExists {
    param([string]$ScriptPath)
    if (-not (Test-Path $ScriptPath)) {
        Write-StatusLog "‚ö†Ô∏è Script non trouv√©: $ScriptPath" "Yellow"
        return $false
    }
    return $true
}

function Invoke-AuditPreDeploy {
    Write-StatusLog "üîç AUDIT PR√â-D√âPLOIEMENT" "Blue"
    Write-StatusLog "========================" "Blue"
    
    try {
        if (-not (Test-ScriptExists "test-deploy-audit.mjs")) {
            Write-StatusLog "‚ö†Ô∏è Script d'audit non trouv√©, passage √† l'√©tape suivante" "Yellow"
            return $true
        }
        
        $auditResult = node test-deploy-audit.mjs
        if ($LASTEXITCODE -ne 0) {
            throw "Audit √©chou√© avec code: $LASTEXITCODE"
        }
        
        Write-StatusLog "‚úÖ Audit termin√© avec succ√®s" "Green"
        return $true
    } catch {
        Write-StatusLog "‚ùå Audit √©chou√©: $($_.Exception.Message)" "Red"
        Write-StatusLog "‚ö†Ô∏è Poursuite du d√©ploiement malgr√© l'audit..." "Yellow"
        return $false
    }
}

function Invoke-FreshBuild {
    Write-StatusLog "üî® BUILD COMPLET" "Blue"
    Write-StatusLog "================" "Blue"
    
    try {
        # V√©rification que npm est disponible
        $npmVersion = npm --version 2>$null
        if (-not $npmVersion) {
            throw "npm n'est pas disponible. V√©rifiez votre installation Node.js"
        }
        
        # Build fresh avec nettoyage
        if (Test-Path "dist") {
            Remove-Item "dist" -Recurse -Force
            Write-StatusLog "üßπ Ancien dist/ supprim√©" "Yellow"
        }
        
        # V√©rification de la commande build
        $packageJson = Get-Content "package.json" -ErrorAction SilentlyContinue | ConvertFrom-Json
        if (-not $packageJson.scripts."build:both") {
            Write-StatusLog "‚ö†Ô∏è Script build:both non trouv√©, tentative avec build..." "Yellow"
            npm run build
        } else {
            npm run build:both
        }
        
        if ($LASTEXITCODE -ne 0) {
            throw "Build √©chou√© avec code: $LASTEXITCODE"
        }
        
        Write-StatusLog "‚úÖ Build complet termin√©" "Green"
        
        # V√©rification post-build
        Test-BuildsExist
        
        return $true
    } catch {
        Write-StatusLog "‚ùå Build √©chou√©: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Invoke-DeploymentBulletproof {
    Write-StatusLog "üöÄ D√âPLOIEMENT BULLETPROOF" "Blue"
    Write-StatusLog "==========================" "Blue"
    
    try {
        # V√©rification des scripts de d√©ploiement
        $deployScript = $null
        $deployScripts = @("deploy-bulletproof-v2.js", "deploy-combined-quick.js", "deploy.js")
        
        foreach ($script in $deployScripts) {
            if (Test-Path $script) {
                $deployScript = $script
                break
            }
        }
        
        if (-not $deployScript) {
            throw "Aucun script de d√©ploiement trouv√©. Scripts recherch√©s: $($deployScripts -join ', ')"
        }
        
        Write-StatusLog "üì¶ Utilisation du script: $deployScript" "Cyan"
        
        # Utiliser la version V2 optimis√©e en priorit√©
        node $deployScript
        
        if ($LASTEXITCODE -ne 0) {
            throw "D√©ploiement √©chou√© avec code: $LASTEXITCODE"
        }
        
        Write-StatusLog "‚úÖ D√©ploiement termin√© avec succ√®s" "Green"
        return $true
    } catch {
        Write-StatusLog "‚ùå D√©ploiement √©chou√©: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Invoke-ValidationPost {
    Write-StatusLog "üîç VALIDATION POST-D√âPLOIEMENT" "Blue"
    Write-StatusLog "==============================" "Blue"
    
    try {
        # Configuration pour les tests HTTP
        $timeoutSeconds = 10
        $urls = @{
            "Landing" = "https://dev.melyia.com"
            "App" = "https://app-dev.melyia.com"
        }
        
        $results = @{}
        
        foreach ($site in $urls.GetEnumerator()) {
            try {
                Write-StatusLog "üîç Test de $($site.Key): $($site.Value)" "Cyan"
                
                $response = Invoke-WebRequest -Uri $site.Value -TimeoutSec $timeoutSeconds -UseBasicParsing -ErrorAction Stop
                $statusCode = $response.StatusCode
                $results[$site.Key] = $statusCode
                
                Write-StatusLog "‚úÖ $($site.Key): $statusCode" "Green"
            } catch {
                $statusCode = "ERROR"
                $results[$site.Key] = $statusCode
                Write-StatusLog "‚ùå $($site.Key): $($_.Exception.Message)" "Red"
            }
        }
        
        # √âvaluation globale
        $successCount = ($results.Values | Where-Object { $_ -eq 200 }).Count
        $totalCount = $results.Count
        
        if ($successCount -eq $totalCount) {
            Write-StatusLog "‚úÖ Validation r√©ussie - Tous les sites accessibles ($successCount/$totalCount)" "Green"
            return $true
        } elseif ($successCount -gt 0) {
            Write-StatusLog "‚ö†Ô∏è Validation partielle - $successCount/$totalCount sites accessibles" "Yellow"
            return $true  # Pas bloquant
        } else {
            Write-StatusLog "‚ùå Validation √©chou√©e - Aucun site accessible" "Red"
            return $false
        }
    } catch {
        Write-StatusLog "‚ö†Ô∏è Validation externe limit√©e: $($_.Exception.Message)" "Yellow"
        Write-StatusLog "üí° D√©ploiement probablement OK, v√©rifiez manuellement" "Yellow"
        return $true  # Pas bloquant
    }
}

function Show-DeploymentSummary {
    param([datetime]$StartTime, [bool]$Success)
    
    $duration = [math]::Round(((Get-Date) - $StartTime).TotalSeconds, 1)
    
    Write-Host ""
    Write-StatusLog "=================================" "Blue"
    
    if ($Success) {
        Write-StatusLog "üéâ D√âPLOIEMENT R√âUSSI en ${duration}s" "Green"
        Write-StatusLog "üìç Landing: https://dev.melyia.com" "Green"
        Write-StatusLog "üìç App: https://app-dev.melyia.com" "Green"
        Write-StatusLog "üõ°Ô∏è Backend pr√©serv√© automatiquement" "Green"
        Write-StatusLog "‚ö° Processus complet finalis√©" "Green"
    } else {
        Write-StatusLog "üí• D√âPLOIEMENT √âCHOU√â apr√®s ${duration}s" "Red"
        Write-StatusLog "üí° V√©rifiez les logs ci-dessus" "Yellow"
        Write-StatusLog "üîß Commandes debug:" "Yellow"
        Write-StatusLog "   - node test-deploy-audit.mjs" "Yellow"
        Write-StatusLog "   - npm run build" "Yellow"
        Write-StatusLog "   - Test-Path dist/" "Yellow"
    }
    
    Write-StatusLog "=================================" "Blue"
}

function Test-Prerequisites {
    Write-StatusLog "üîç V√©rification des pr√©requis..." "Blue"
    
    # Test Node.js
    try {
        $nodeVersion = node --version
        Write-StatusLog "‚úÖ Node.js: $nodeVersion" "Green"
    } catch {
        throw "Node.js n'est pas install√© ou accessible"
    }
    
    # Test npm
    try {
        $npmVersion = npm --version
        Write-StatusLog "‚úÖ npm: $npmVersion" "Green"
    } catch {
        throw "npm n'est pas install√© ou accessible"
    }
    
    # Test fichiers critiques
    $criticalFiles = @("package.json")
    foreach ($file in $criticalFiles) {
        if (-not (Test-Path $file)) {
            throw "Fichier critique manquant: $file"
        }
    }
    Write-StatusLog "‚úÖ Fichiers critiques pr√©sents" "Green"
}

# PROCESSUS PRINCIPAL
try {
    $startTime = Get-Date
    $success = $true
    
    # √âtape 0: V√©rification des pr√©requis
    Test-Prerequisites
    
    # √âtape 1: Synchronisation serveur
    Write-StatusLog "üîÑ Synchronisation serveur..." "Cyan"
    if (Test-Path ".\dev\sync-essential.ps1") {
        & ".\dev\sync-essential.ps1"
        if ($LASTEXITCODE -ne 0) {
            Write-StatusLog "‚ö†Ô∏è Synchronisation en √©chec, poursuite..." "Yellow"
        }
    } else {
        Write-StatusLog "‚ö†Ô∏è Script de synchronisation non trouv√©, poursuite..." "Yellow"
    }
    
    # √âtape 2: Audit pr√©-d√©ploiement
    if (-not (Invoke-AuditPreDeploy)) {
        Write-StatusLog "‚ö†Ô∏è Audit en √©chec - Poursuite du d√©ploiement..." "Yellow"
    }
    
    # √âtape 3: Build complet et frais
    if (-not (Invoke-FreshBuild)) {
        $success = $false
        throw "Build √©chou√©"
    }
    
    # √âtape 4: D√©ploiement bulletproof
    if (-not (Invoke-DeploymentBulletproof)) {
        $success = $false
        throw "D√©ploiement √©chou√©"
    }
    
    # √âtape 5: Validation post-d√©ploiement
    $validationResult = Invoke-ValidationPost
    if (-not $validationResult) {
        Write-StatusLog "‚ö†Ô∏è Validation √©chou√©e mais d√©ploiement probablement OK" "Yellow"
    }
    
    # √âtape 6: Audit final
    Write-StatusLog "üîç Audit final..." "Cyan"
    if (Test-ScriptExists "test-deploy-audit.mjs") {
        try {
            node test-deploy-audit.mjs | Out-Null
            if ($LASTEXITCODE -eq 0) {
                Write-StatusLog "‚úÖ Audit final r√©ussi" "Green"
            }
        } catch {
            Write-StatusLog "‚ö†Ô∏è Audit final √©chou√© mais d√©ploiement OK" "Yellow"
        }
    }
    
    Show-DeploymentSummary -StartTime $startTime -Success $success
    
} catch {
    $success = $false
    Write-StatusLog "üí• ERREUR FATALE: $($_.Exception.Message)" "Red"
    Show-DeploymentSummary -StartTime $startTime -Success $success
    exit 1
}

Write-Host ""
Write-StatusLog "‚úÖ Processus de d√©ploiement termin√© avec succ√®s !" "Green"
Write-StatusLog "üéØ Vos changements sont maintenant en ligne" "Green"
Write-StatusLog "üîç V√©rifiez manuellement les URLs si n√©cessaire" "Cyan"