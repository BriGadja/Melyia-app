# MIGRATION v34.0 - SYST√àME FICHIERS 2 NIVEAUX
# Ex√©cution s√©curis√©e avec v√©rifications
# Date: 2025-01-24

Write-Host "üöÄ MIGRATION MELYIA v34.0 - SYST√àME FICHIERS 2 NIVEAUX" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Gray

# V√©rifications pr√©alables
Write-Host "`nüîç V√âRIFICATIONS PR√âALABLES..." -ForegroundColor Yellow

# 1. V√©rifier que le fichier SQL existe
$sqlFile = "server/configs/postgresql/migration-v34-documents-system.sql"
if (-not (Test-Path $sqlFile)) {
    Write-Host "‚ùå Fichier SQL non trouv√©: $sqlFile" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Fichier SQL trouv√©" -ForegroundColor Green

# 2. V√©rifier la connexion serveur
Write-Host "`nüì° Test connexion serveur..." -ForegroundColor Yellow
try {
    $testResponse = Invoke-RestMethod -Uri "https://app-dev.melyia.com/api/health" -Method GET -TimeoutSec 10
    Write-Host "‚úÖ Serveur accessible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serveur non accessible" -ForegroundColor Red
    Write-Host "Erreur: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 3. Confirmer avec l'utilisateur
Write-Host "`n‚ö†Ô∏è  ATTENTION: Cette migration va:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Cr√©er une sauvegarde patient_documents_backup_v33" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Cr√©er la table general_documents" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Renommer patient_documents ‚Üí personal_documents" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Ins√©rer 3 documents g√©n√©raux de base" -ForegroundColor Gray

$confirmation = Read-Host "`nContinuer la migration? (O/N)"
if ($confirmation -ne "O" -and $confirmation -ne "o") {
    Write-Host "‚ùå Migration annul√©e par l'utilisateur" -ForegroundColor Red
    exit 0
}

# Ex√©cution de la migration
Write-Host "`nüîß EX√âCUTION MIGRATION..." -ForegroundColor Cyan

# Upload du fichier SQL vers le serveur
Write-Host "üì§ Upload script SQL vers serveur..." -ForegroundColor Yellow

# Lire le contenu du fichier SQL
$sqlContent = Get-Content $sqlFile -Raw

# Cr√©er le fichier temporaire pour l'upload
$tempSqlFile = "migration-v34-temp.sql"
$sqlContent | Out-File -FilePath $tempSqlFile -Encoding UTF8

try {
    # Upload via SCP
    $scpCommand = "scp -i server/.ssh/melyia-server -o StrictHostKeyChecking=no $tempSqlFile ubuntu@51.91.145.255:/tmp/"
    cmd /c $scpCommand

    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ SQL upload√© avec succ√®s" -ForegroundColor Green
    } else {
        throw "Erreur SCP"
    }

    # Ex√©cuter la migration sur le serveur
    Write-Host "üóÉÔ∏è Ex√©cution migration PostgreSQL..." -ForegroundColor Yellow
    
    $sshCommand = @"
ssh -i server/.ssh/melyia-server -o StrictHostKeyChecking=no ubuntu@51.91.145.255 "
echo 'QOZ9QyJd4YiufyzMj0eq7GgHV0sBrlSX' | psql -h localhost -U postgres -d melyia_dev -f /tmp/migration-v34-temp.sql
"@

    $migrationResult = cmd /c $sshCommand
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Migration PostgreSQL r√©ussie" -ForegroundColor Green
        Write-Host "$migrationResult" -ForegroundColor Gray
    } else {
        throw "Erreur migration PostgreSQL"
    }

    # Nettoyage fichier temporaire sur serveur
    $cleanupCommand = "ssh -i server/.ssh/melyia-server -o StrictHostKeyChecking=no ubuntu@51.91.145.255 'rm -f /tmp/migration-v34-temp.sql'"
    cmd /c $cleanupCommand

    Write-Host "üßπ Nettoyage fichier temporaire serveur" -ForegroundColor Gray

} catch {
    Write-Host "‚ùå Erreur lors de la migration: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    # Nettoyage fichier temporaire local
    if (Test-Path $tempSqlFile) {
        Remove-Item $tempSqlFile
        Write-Host "üßπ Nettoyage fichier temporaire local" -ForegroundColor Gray
    }
}

# V√©rifications post-migration
Write-Host "`nüîé V√âRIFICATIONS POST-MIGRATION..." -ForegroundColor Cyan

# Test avec un appel √† l'API pour v√©rifier que le serveur fonctionne toujours
try {
    $testResponse = Invoke-RestMethod -Uri "https://app-dev.melyia.com/api/health" -Method GET -TimeoutSec 10
    Write-Host "‚úÖ Serveur op√©rationnel apr√®s migration" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Serveur non accessible apr√®s migration" -ForegroundColor Red
    Write-Host "V√©rifier les logs serveur" -ForegroundColor Yellow
}

# Synchroniser le nouveau schema
Write-Host "`nüì• Synchronisation nouveau schema..." -ForegroundColor Yellow
try {
    & ".\dev\sync-essential.ps1"
    Write-Host "‚úÖ Schema synchronise" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Erreur synchronisation schema" -ForegroundColor Yellow
}

Write-Host "`nüéØ MIGRATION v34.0 TERMINEE" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Gray
Write-Host "üìö Table general_documents: Creee" -ForegroundColor Green
Write-Host "üìã Table personal_documents: Renommee (ex patient_documents)" -ForegroundColor Green
Write-Host "üíæ Sauvegarde: patient_documents_backup_v33" -ForegroundColor Green
Write-Host "üîß Prochaine etape: MICRO-ETAPE 2 - API Admin Documents Generaux" -ForegroundColor Cyan

Write-Host "`n‚úÖ MIGRATION REUSSIE - SYSTEME 2 NIVEAUX OPERATIONNEL!" -ForegroundColor Green 