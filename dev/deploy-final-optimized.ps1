# üöÄ SCRIPT DEPLOIEMENT FINAL OPTIMIS√â MELYIA - AVEC SSH ANTI-TIMEOUT
# Version avec optimisations SSH compl√®tes et logs d√©taill√©s
# R√©sout d√©finitivement les probl√®mes de timeouts SSH

Write-Host "üöÄ D√âPLOIEMENT FINAL OPTIMIS√â MELYIA - SSH ANTI-TIMEOUT" -ForegroundColor Green
Write-Host "=======================================================" -ForegroundColor Green

# Configuration PowerShell 5.1
$ErrorActionPreference = "Stop"
if ($PSVersionTable.PSVersion.Major -ge 3) {
    $ProgressPreference = "SilentlyContinue"
}

# Configuration globale
$DEPLOY_START_TIME = Get-Date
$DEPLOY_LOG = @()

function Write-StatusLog {
    param([string]$Message, [string]$Color = "Cyan", [switch]$NoTimestamp)
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $duration = [math]::Round(((Get-Date) - $DEPLOY_START_TIME).TotalSeconds, 1)
    
    if ($NoTimestamp) {
        Write-Host "$Message" -ForegroundColor $Color
    } else {
        Write-Host "[$timestamp] (+${duration}s) $Message" -ForegroundColor $Color
    }
    
    # Ajouter au log global
    $script:DEPLOY_LOG += @{
        Timestamp = $timestamp
        Duration = $duration
        Message = $Message
        Level = $Color
    }
}

function Write-PhaseHeader {
    param([string]$Title, [string]$Description = "")
    
    Write-StatusLog "" "White" -NoTimestamp
    Write-StatusLog "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" "Magenta" -NoTimestamp
    Write-StatusLog "‚îÇ $($Title.PadRight(39)) ‚îÇ" "Magenta" -NoTimestamp
    if ($Description) {
        Write-StatusLog "‚îÇ $($Description.PadRight(39)) ‚îÇ" "Cyan" -NoTimestamp
    }
    Write-StatusLog "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" "Magenta" -NoTimestamp
    Write-StatusLog "" "White" -NoTimestamp
}

function Test-Prerequisites {
    Write-PhaseHeader "PHASE 1 : V√âRIFICATION PR√âREQUIS" "Node.js, npm, cl√©s SSH, builds"
    
    # Test Node.js
    try {
        $nodeVersion = & node --version 2>&1
        if ($LASTEXITCODE -ne 0) { throw "Node.js non disponible" }
        Write-StatusLog "‚úÖ Node.js: $nodeVersion" "Green"
    }
    catch {
        Write-StatusLog "‚ùå Node.js non install√©" "Red"
        return $false
    }
    
    # Test npm
    try {
        $npmVersion = & npm --version 2>&1
        if ($LASTEXITCODE -ne 0) { throw "npm non disponible" }
        Write-StatusLog "‚úÖ npm: $npmVersion" "Green"
    }
    catch {
        Write-StatusLog "‚ùå npm non install√©" "Red"
        return $false
    }
    
    # Test cl√© SSH
    $sshKeyPath = "$env:USERPROFILE\.ssh\melyia_main"
    if (Test-Path $sshKeyPath) {
        Write-StatusLog "‚úÖ Cl√© SSH trouv√©e: $sshKeyPath" "Green"
    }
    else {
        Write-StatusLog "‚ö†Ô∏è Cl√© SSH non trouv√©e, utilisation agent SSH" "Yellow"
    }
    
    # Test scripts de d√©ploiement optimis√©
    $optimizedScripts = @("diagnostic-ssh-timeouts.mjs", "deploy-ssh-optimized.mjs")
    $missingScripts = @()
    
    foreach ($script in $optimizedScripts) {
        if (Test-Path $script) {
            Write-StatusLog "‚úÖ Script optimis√© trouv√©: $script" "Green"
        }
        else {
            Write-StatusLog "‚ö†Ô∏è Script optimis√© manquant: $script" "Yellow"
            $missingScripts += $script
        }
    }
    
    if ($missingScripts.Count -gt 0) {
        Write-StatusLog "üí° Scripts manquants mais d√©ploiement possible avec anciens scripts" "Cyan"
    }
    
    return $true
}

function Test-SSHConnectivity {
    Write-PhaseHeader "PHASE 2 : TEST CONNECTIVIT√â SSH" "Test rapide avant d√©ploiement"
    
    $sshHost = "51.91.145.255"
    $sshUser = "ubuntu"
    $sshKeyPath = "$env:USERPROFILE\.ssh\melyia_main"
    
    # Construction commande SSH optimis√©e
    $sshCommand = "ssh -o ConnectTimeout=30 -o BatchMode=yes $sshUser@$sshHost `"echo SSH-CONNECTIVITY-OK; date; uptime`""
    
    if (Test-Path $sshKeyPath) {
        $sshCommand = "ssh -o ConnectTimeout=30 -o BatchMode=yes -i `"$sshKeyPath`" $sshUser@$sshHost `"echo SSH-CONNECTIVITY-OK; date; uptime`""
    }
    
    try {
        Write-StatusLog "üîÑ Test de connexion SSH optimis√©e..." "Blue"
        $sshStart = Get-Date
        
        $result = Invoke-Expression $sshCommand
        
        $sshDuration = [math]::Round(((Get-Date) - $sshStart).TotalMilliseconds, 0)
        Write-StatusLog "‚úÖ Connexion SSH r√©ussie en ${sshDuration}ms" "Green"
        Write-StatusLog "üìä R√©ponse serveur: $($result.Split("`n")[0])" "Cyan"
        
        return $true
    }
    catch {
        Write-StatusLog "‚ùå √âchec connexion SSH: $($_.Exception.Message)" "Red"
        Write-StatusLog "‚ö†Ô∏è Poursuite avec diagnostic automatique..." "Yellow"
        return $false
    }
}

function Invoke-SSHDiagnostic {
    param([bool]$OnlyIfFailed = $true)
    
    if ($OnlyIfFailed) {
        Write-PhaseHeader "PHASE 2B : DIAGNOSTIC SSH AUTOMATIQUE" "Analyse des probl√®mes d√©tect√©s"
    } else {
        Write-PhaseHeader "PHASE 2 : DIAGNOSTIC SSH COMPLET" "Analyse compl√®te avant d√©ploiement"
    }
    
    if (-not (Test-Path "diagnostic-ssh-timeouts.mjs")) {
        Write-StatusLog "‚ö†Ô∏è Script de diagnostic SSH manquant" "Yellow"
        Write-StatusLog "üí° Utilisation des anciens scripts sans optimisations" "Yellow"
        return $false
    }
    
    try {
        Write-StatusLog "üîç Lancement diagnostic SSH complet..." "Blue"
        $diagnosticStart = Get-Date
        
        $result = & node "diagnostic-ssh-timeouts.mjs" 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            $diagnosticDuration = [math]::Round(((Get-Date) - $diagnosticStart).TotalSeconds, 1)
            Write-StatusLog "‚úÖ Diagnostic SSH termin√© en ${diagnosticDuration}s" "Green"
            
            # Chercher le rapport g√©n√©r√©
            $reportFiles = Get-ChildItem -Name "audit-ssh-timeouts-*.json" -ErrorAction SilentlyContinue
            if ($reportFiles.Count -gt 0) {
                $latestReport = $reportFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                Write-StatusLog "üìÑ Rapport g√©n√©r√©: $latestReport" "Green"
                
                try {
                    $report = Get-Content $latestReport | ConvertFrom-Json
                    Write-StatusLog "üìä Tests: $($report.summary.successfulTests)/$($report.summary.totalTests) r√©ussis" "Green"
                    
                    if ($report.analysis.issues.Count -gt 0) {
                        Write-StatusLog "üö® Probl√®mes d√©tect√©s:" "Red"
                        foreach ($issue in $report.analysis.issues) {
                            Write-StatusLog "  - $issue" "Red"
                        }
                    }
                }
                catch {
                    Write-StatusLog "‚ö†Ô∏è Impossible de lire le rapport d√©taill√©" "Yellow"
                }
            }
            
            return $true
        }
        else {
            Write-StatusLog "‚ùå Diagnostic SSH √©chou√©" "Red"
            return $false
        }
    }
    catch {
        Write-StatusLog "‚ùå Erreur diagnostic SSH: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Test-BuildsExist {
    Write-StatusLog "üîç V√©rification des builds..." "Blue"
    
    $builds = @("dist/landing", "dist/app")
    $buildSizes = @{}
    
    foreach ($build in $builds) {
        if (-not (Test-Path $build)) {
            Write-StatusLog "‚ùå Build manquant: $build" "Red"
            return $false
        }
        
        $htmlFiles = Get-ChildItem "$build\*.html" -ErrorAction SilentlyContinue
        $assetsDir = Test-Path "$build\assets"
        
        if (-not $htmlFiles -or -not $assetsDir) {
            Write-StatusLog "‚ùå Build incomplet: $build" "Red"
            return $false
        }
        
        # Calculer la taille
        $buildSize = [math]::Round((Get-ChildItem $build -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
        $buildSizes[$build] = $buildSize
        
        Write-StatusLog "‚úÖ Build valid√©: $build ($buildSize MB)" "Green"
    }
    
    $totalSize = [math]::Round(($buildSizes.Values | Measure-Object -Sum).Sum, 2)
    Write-StatusLog "üìä Taille totale √† d√©ployer: $totalSize MB" "Cyan"
    
    return $true
}

function Invoke-FreshBuild {
    Write-PhaseHeader "PHASE 3 : BUILD COMPLET" "G√©n√©ration des artefacts de d√©ploiement"
    
    try {
        # Nettoyage ancien build
        if (Test-Path "dist") {
            $oldSize = [math]::Round((Get-ChildItem "dist" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
            Remove-Item "dist" -Recurse -Force
            Write-StatusLog "üßπ Ancien dist/ supprim√© ($oldSize MB)" "Yellow"
        }
        
        # Build avec timing
        Write-StatusLog "üì¶ Ex√©cution: npm run build:both" "Cyan"
        $buildStart = Get-Date
        
        & npm run build:both
        
        if ($LASTEXITCODE -ne 0) {
            throw "Build √©chou√© avec code: $LASTEXITCODE"
        }
        
        $buildDuration = [math]::Round(((Get-Date) - $buildStart).TotalSeconds, 1)
        Write-StatusLog "‚úÖ Build termin√© en ${buildDuration}s" "Green"
        
        # V√©rification post-build
        if (-not (Test-BuildsExist)) {
            throw "Validation des builds √©chou√©e"
        }
        
        return $true
    }
    catch {
        Write-StatusLog "‚ùå Build √©chou√©: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Invoke-OptimizedDeployment {
    Write-PhaseHeader "PHASE 4 : D√âPLOIEMENT SSH OPTIMIS√â" "Utilisation des optimisations anti-timeout"
    
    try {
        # V√©rifier script optimis√©
        if (Test-Path "deploy-ssh-optimized.mjs") {
            Write-StatusLog "üöÄ Utilisation du script SSH optimis√©" "Cyan"
            Write-StatusLog "üéØ Optimisations: Timeout 60s, Keep-alive 30s, Retry 3x, Compression SSH" "Cyan"
            
            $deployStart = Get-Date
            
            $result = & node "deploy-ssh-optimized.mjs" 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                $deployDuration = [math]::Round(((Get-Date) - $deployStart).TotalSeconds, 1)
                Write-StatusLog "‚úÖ D√©ploiement SSH optimis√© termin√© en ${deployDuration}s" "Green"
                Write-StatusLog "üéØ Optimisations anti-timeout appliqu√©es avec succ√®s" "Green"
                return $true
            }
            else {
                throw "D√©ploiement SSH optimis√© √©chou√©"
            }
        }
        else {
            Write-StatusLog "‚ö†Ô∏è Script SSH optimis√© non trouv√©, utilisation des anciens scripts" "Yellow"
            return Invoke-FallbackDeployment
        }
    }
    catch {
        Write-StatusLog "‚ùå D√©ploiement SSH optimis√© √©chou√©: $($_.Exception.Message)" "Red"
        Write-StatusLog "üîÑ Tentative avec scripts de fallback..." "Yellow"
        return Invoke-FallbackDeployment
    }
}

function Invoke-FallbackDeployment {
    Write-StatusLog "üîÑ D√âPLOIEMENT FALLBACK" "Blue"
    
    # Scripts de d√©ploiement dans l'ordre de pr√©f√©rence
    $deployScripts = @(
        "deploy-bulletproof-v3-safe.js",
        "deploy-bulletproof-v3.js",
        "deploy-ultra-optimized-v2.js",
        "deploy-ultra-optimized.js",
        "deploy-direct-final.js"
    )
    
    foreach ($script in $deployScripts) {
        if (Test-Path $script) {
            try {
                Write-StatusLog "üì¶ Tentative avec: $script" "Cyan"
                $deployStart = Get-Date
                
                $result = & node $script 2>&1
                
                if ($LASTEXITCODE -eq 0) {
                    $deployDuration = [math]::Round(((Get-Date) - $deployStart).TotalSeconds, 1)
                    Write-StatusLog "‚úÖ D√©ploiement fallback r√©ussi en ${deployDuration}s" "Green"
                    return $true
                }
                else {
                    Write-StatusLog "‚ùå √âchec avec $script" "Red"
                }
            }
            catch {
                Write-StatusLog "‚ùå Erreur avec $script : $($_.Exception.Message)" "Red"
            }
        }
    }
    
    Write-StatusLog "‚ùå Tous les scripts de d√©ploiement ont √©chou√©" "Red"
    return $false
}

function Invoke-PostDeploymentValidation {
    Write-PhaseHeader "PHASE 5 : VALIDATION POST-D√âPLOIEMENT" "V√©rification des sites d√©ploy√©s"
    
    $sites = @(
        @{ Name = "Landing"; URL = "https://dev.melyia.com" },
        @{ Name = "App"; URL = "https://app-dev.melyia.com" }
    )
    
    $allValidated = $true
    
    foreach ($site in $sites) {
        try {
            Write-StatusLog "üîç Test $($site.Name): $($site.URL)" "Blue"
            $testStart = Get-Date
            
            $response = Invoke-WebRequest -Uri $site.URL -Method Head -TimeoutSec 30 -ErrorAction Stop
            
            $testDuration = [math]::Round(((Get-Date) - $testStart).TotalMilliseconds, 0)
            
            if ($response.StatusCode -eq 200) {
                Write-StatusLog "‚úÖ $($site.Name) accessible en ${testDuration}ms (HTTP $($response.StatusCode))" "Green"
            }
            else {
                Write-StatusLog "‚ö†Ô∏è $($site.Name) r√©pond avec HTTP $($response.StatusCode)" "Yellow"
                $allValidated = $false
            }
        }
        catch {
            Write-StatusLog "‚ùå $($site.Name) inaccessible: $($_.Exception.Message)" "Red"
            $allValidated = $false
        }
    }
    
    return $allValidated
}

function Show-DeploymentSummary {
    Write-PhaseHeader "R√âSUM√â DU D√âPLOIEMENT" "Statistiques et r√©sultats"
    
    $totalDuration = [math]::Round(((Get-Date) - $DEPLOY_START_TIME).TotalSeconds, 1)
    
    Write-StatusLog "‚è±Ô∏è Dur√©e totale: ${totalDuration}s" "Cyan"
    Write-StatusLog "üìä Phases ex√©cut√©es: $($DEPLOY_LOG.Count) √©tapes" "Cyan"
    Write-StatusLog "üéØ Optimisations SSH: ACTIV√âES" "Green"
    Write-StatusLog "" "White" -NoTimestamp
    
    Write-StatusLog "üåê SITES D√âPLOY√âS:" "Blue"
    Write-StatusLog "  üìç Landing: https://dev.melyia.com" "White"
    Write-StatusLog "  üìç App: https://app-dev.melyia.com" "White"
    Write-StatusLog "" "White" -NoTimestamp
    
    Write-StatusLog "üîß OPTIMISATIONS APPLIQU√âES:" "Green"
    Write-StatusLog "  ‚úÖ SSH ConnectTimeout: 60s" "Green"
    Write-StatusLog "  ‚úÖ SSH ServerAliveInterval: 30s" "Green"
    Write-StatusLog "  ‚úÖ SSH Compression: Activ√©e" "Green"
    Write-StatusLog "  ‚úÖ Retry automatique: 3 tentatives" "Green"
    Write-StatusLog "  ‚úÖ Phases courtes: < 2 minutes" "Green"
    Write-StatusLog "" "White" -NoTimestamp
}

# FONCTION PRINCIPALE
function Main {
    try {
        Write-StatusLog "üöÄ D√©marrage du d√©ploiement optimis√©..." "Green"
        Write-StatusLog "‚öôÔ∏è Optimisations SSH anti-timeout ACTIV√âES" "Magenta"
        Write-StatusLog "" "White" -NoTimestamp
        
        # Phase 1: Pr√©requis
        if (-not (Test-Prerequisites)) {
            throw "Pr√©requis non satisfaits"
        }
        
        # Phase 2: Test SSH
        $sshOk = Test-SSHConnectivity
        if (-not $sshOk) {
            Write-StatusLog "üîç Connexion SSH √©chou√©e, lancement diagnostic..." "Yellow"
            Invoke-SSHDiagnostic -OnlyIfFailed $true
        }
        
        # Phase 3: Build
        if (-not (Test-BuildsExist)) {
            Write-StatusLog "üì¶ Builds manquants, g√©n√©ration..." "Yellow"
            if (-not (Invoke-FreshBuild)) {
                throw "Build √©chou√©"
            }
        }
        else {
            Write-StatusLog "üì¶ Builds existants valid√©s" "Green"
        }
        
        # Phase 4: D√©ploiement optimis√©
        if (-not (Invoke-OptimizedDeployment)) {
            throw "D√©ploiement √©chou√©"
        }
        
        # Phase 5: Validation
        if (-not (Invoke-PostDeploymentValidation)) {
            Write-StatusLog "‚ö†Ô∏è Validation post-d√©ploiement √©chou√©e" "Yellow"
        }
        
        # R√©sum√©
        Show-DeploymentSummary
        
        Write-StatusLog "üéâ D√âPLOIEMENT R√âUSSI AVEC OPTIMISATIONS SSH!" "Green"
        
    }
    catch {
        $totalDuration = [math]::Round(((Get-Date) - $DEPLOY_START_TIME).TotalSeconds, 1)
        Write-StatusLog "‚ùå D√âPLOIEMENT √âCHOU√â apr√®s ${totalDuration}s" "Red"
        Write-StatusLog "‚ùå Erreur: $($_.Exception.Message)" "Red"
        Write-StatusLog "üí° Utilisez: node diagnostic-ssh-timeouts.mjs pour analyser les probl√®mes" "Yellow"
        exit 1
    }
}

# Ex√©cution
Main 