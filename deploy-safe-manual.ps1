# üöÄ SCRIPT D√âPLOIEMENT S√âCURIS√â MANUEL - MELYIA
# M√©thode √©prouv√©e 100% succ√®s - √âvite les timeouts SSH

param(
    [switch]$SkipBuild,
    [switch]$LandingOnly,
    [switch]$AppOnly,
    [switch]$Verbose
)

$CONFIG = @{
    SSH_HOST = "ubuntu@51.91.145.255"
    LANDING_LOCAL = "dist/landing"
    LANDING_REMOTE = "/var/www/melyia/dev-site"
    APP_LOCAL = "dist/app"
    APP_REMOTE = "/var/www/melyia/app-dev"
    TIMESTAMP = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
}

function Write-LogMessage {
    param([string]$Message, [string]$Color = "Cyan", [switch]$VerboseOnly)
    
    if ($VerboseOnly -and -not $Verbose) { return }
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $prefix = if ($VerboseOnly) { "[DEBUG]" } else { "" }
    Write-Host "[$timestamp] $prefix $Message" -ForegroundColor $Color
}

function Write-ProgressLog {
    param([string]$Activity, [string]$Status, [int]$PercentComplete)
    Write-Progress -Activity $Activity -Status $Status -PercentComplete $PercentComplete
    Write-LogMessage "$Activity - $Status ($PercentComplete%)" "Blue" -VerboseOnly
}

function Get-FolderSize {
    param([string]$Path)
    if (Test-Path $Path) {
        $size = (Get-ChildItem $Path -Recurse | Measure-Object -Property Length -Sum).Sum
        return [math]::Round($size / 1MB, 2)
    }
    return 0
}

function Test-Prerequisites {
    Write-LogMessage "üîç V√©rification pr√©requis..." "Blue"
    Write-ProgressLog "Pr√©requis" "V√©rification des builds locaux..." 10
    
    # V√©rifier builds locaux
    if (-not $SkipBuild) {
        $landingExists = Test-Path $CONFIG.LANDING_LOCAL
        $appExists = Test-Path $CONFIG.APP_LOCAL
        
        Write-LogMessage "üìÇ Landing build: $(if($landingExists){'‚úÖ Pr√©sent'}else{'‚ùå Manquant'})" "White" -VerboseOnly
        Write-LogMessage "üìÇ App build: $(if($appExists){'‚úÖ Pr√©sent'}else{'‚ùå Manquant'})" "White" -VerboseOnly
        
        if (-not $landingExists -or -not $appExists) {
            Write-LogMessage "üî® Builds manquants - Ex√©cution npm run build:both..." "Yellow"
            Write-ProgressLog "Pr√©requis" "Compilation des builds..." 20
            
            $buildStart = Get-Date
            npm run build:both
            if ($LASTEXITCODE -ne 0) {
                throw "‚ùå Build failed"
            }
            $buildDuration = (Get-Date) - $buildStart
            Write-LogMessage "‚úÖ Build termin√© en $($buildDuration.TotalSeconds.ToString('F1'))s" "Green"
        } else {
            Write-LogMessage "‚úÖ Builds existants d√©tect√©s" "Green"
        }
    } else {
        Write-LogMessage "‚è≠Ô∏è Build ignor√© (param√®tre -SkipBuild)" "Yellow"
    }
    
    # Afficher tailles des builds
    if (Test-Path $CONFIG.LANDING_LOCAL) {
        $landingSize = Get-FolderSize $CONFIG.LANDING_LOCAL
        Write-LogMessage "üìä Landing build: $landingSize MB" "White" -VerboseOnly
    }
    if (Test-Path $CONFIG.APP_LOCAL) {
        $appSize = Get-FolderSize $CONFIG.APP_LOCAL
        Write-LogMessage "üìä App build: $appSize MB" "White" -VerboseOnly
    }
    
    # V√©rifier connectivit√© SSH
    Write-ProgressLog "Pr√©requis" "Test connectivit√© SSH..." 80
    Write-LogMessage "üîó Test connexion SSH vers $($CONFIG.SSH_HOST)..." "Cyan" -VerboseOnly
    
    $sshStart = Get-Date
    $testSSH = ssh $CONFIG.SSH_HOST "echo 'SSH OK'; uptime"
    $sshDuration = (Get-Date) - $sshStart
    
    if ($LASTEXITCODE -ne 0) {
        throw "‚ùå Connexion SSH impossible vers $($CONFIG.SSH_HOST)"
    }
    
    Write-LogMessage "‚úÖ SSH connect√© en $($sshDuration.TotalMilliseconds.ToString('F0'))ms" "Green" -VerboseOnly
    Write-LogMessage "üñ•Ô∏è Serveur: $($testSSH.Split("`n")[1])" "White" -VerboseOnly
    
    Write-ProgressLog "Pr√©requis" "Validation termin√©e" 100
    Write-LogMessage "‚úÖ Tous les pr√©requis valid√©s" "Green"
}

function Deploy-Landing {
    Write-LogMessage "üè† D√âPLOIEMENT LANDING" "Magenta"
    $deployStart = Get-Date
    
    # √âtape 1: Upload
    Write-ProgressLog "Landing" "Upload des fichiers..." 25
    Write-LogMessage "üì§ Upload landing vers serveur..." "Cyan"
    
    $landingSize = Get-FolderSize $CONFIG.LANDING_LOCAL
    Write-LogMessage "üìä Taille √† uploader: $landingSize MB" "White" -VerboseOnly
    Write-LogMessage "üéØ Destination: /tmp/deploy-landing-$($CONFIG.TIMESTAMP)/" "White" -VerboseOnly
    
    $uploadStart = Get-Date
    scp -r "$($CONFIG.LANDING_LOCAL)/*" "$($CONFIG.SSH_HOST):/tmp/deploy-landing-$($CONFIG.TIMESTAMP)/"
    $uploadDuration = (Get-Date) - $uploadStart
    
    if ($LASTEXITCODE -ne 0) { throw "‚ùå Upload landing failed" }
    Write-LogMessage "‚úÖ Upload termin√© en $($uploadDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
    
    # √âtape 2: Installation (1 seule connexion SSH)
    Write-ProgressLog "Landing" "Installation sur le serveur..." 75
    Write-LogMessage "üîß Installation landing dans $($CONFIG.LANDING_REMOTE)..." "Cyan"
    Write-LogMessage "üóÇÔ∏è Nettoyage dossier existant..." "White" -VerboseOnly
    Write-LogMessage "üìã Application permissions www-data:www-data..." "White" -VerboseOnly
    Write-LogMessage "üîí Configuration permissions 755/644..." "White" -VerboseOnly
    
    $installCmd = @"
echo 'D√©but installation landing...' &&
sudo rm -rf $($CONFIG.LANDING_REMOTE)/* &&
echo 'Dossier nettoy√©' &&
sudo cp -r /tmp/deploy-landing-$($CONFIG.TIMESTAMP)/* $($CONFIG.LANDING_REMOTE)/ &&
echo 'Fichiers copi√©s' &&
sudo chown -R www-data:www-data $($CONFIG.LANDING_REMOTE) &&
echo 'Propri√©taires modifi√©s' &&
sudo chmod -R 644 $($CONFIG.LANDING_REMOTE)/* &&
sudo find $($CONFIG.LANDING_REMOTE) -type d -exec chmod 755 {} + &&
echo 'Permissions configur√©es' &&
rm -rf /tmp/deploy-landing-$($CONFIG.TIMESTAMP) &&
echo 'Nettoyage temporaire termin√©' &&
ls -la $($CONFIG.LANDING_REMOTE) | head -3 &&
echo 'Landing install√© avec succ√®s'
"@
    
    $installStart = Get-Date
    $installOutput = ssh $CONFIG.SSH_HOST $installCmd
    $installDuration = (Get-Date) - $installStart
    
    if ($LASTEXITCODE -ne 0) { throw "‚ùå Installation landing failed" }
    
    # Log des d√©tails d'installation
    if ($Verbose) {
        Write-LogMessage "üìÑ Sortie installation:" "White" -VerboseOnly
        $installOutput | ForEach-Object { Write-LogMessage "   $_" "DarkGray" -VerboseOnly }
    }
    
    Write-LogMessage "‚úÖ Installation termin√©e en $($installDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
    
    $totalDuration = (Get-Date) - $deployStart
    Write-ProgressLog "Landing" "D√©ploiement termin√©" 100
    Write-LogMessage "‚úÖ Landing d√©ploy√© avec succ√®s en $($totalDuration.TotalSeconds.ToString('F1'))s" "Green"
}

function Deploy-App {
    Write-LogMessage "üì± D√âPLOIEMENT APPLICATION" "Magenta"
    $deployStart = Get-Date
    
    # √âtape 1: Upload
    Write-ProgressLog "Application" "Upload des fichiers..." 20
    Write-LogMessage "üì§ Upload application vers serveur..." "Cyan"
    
    $appSize = Get-FolderSize $CONFIG.APP_LOCAL
    Write-LogMessage "üìä Taille √† uploader: $appSize MB" "White" -VerboseOnly
    Write-LogMessage "üéØ Destination: /tmp/deploy-app-$($CONFIG.TIMESTAMP)/" "White" -VerboseOnly
    
    $uploadStart = Get-Date
    scp -r "$($CONFIG.APP_LOCAL)/*" "$($CONFIG.SSH_HOST):/tmp/deploy-app-$($CONFIG.TIMESTAMP)/"
    $uploadDuration = (Get-Date) - $uploadStart
    
    if ($LASTEXITCODE -ne 0) { throw "‚ùå Upload app failed" }
    Write-LogMessage "‚úÖ Upload termin√© en $($uploadDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
    
    # √âtape 2: Sauvegarde backend (si existe)
    Write-ProgressLog "Application" "Sauvegarde backend existant..." 40
    Write-LogMessage "üíæ V√©rification et sauvegarde backend..." "Cyan"
    Write-LogMessage "üîç Recherche server.js et package.json..." "White" -VerboseOnly
    
    $backupCmd = @"
echo 'D√©but sauvegarde backend...' &&
mkdir -p /tmp/backend-backup-$($CONFIG.TIMESTAMP) &&
if [ -f $($CONFIG.APP_REMOTE)/server.js ]; then
    cp $($CONFIG.APP_REMOTE)/server.js /tmp/backend-backup-$($CONFIG.TIMESTAMP)/
    echo 'server.js sauvegard√©'
else
    echo 'server.js non trouv√©'
fi &&
if [ -f $($CONFIG.APP_REMOTE)/package.json ]; then
    cp $($CONFIG.APP_REMOTE)/package.json /tmp/backend-backup-$($CONFIG.TIMESTAMP)/
    echo 'package.json sauvegard√©'  
else
    echo 'package.json non trouv√©'
fi &&
echo 'Sauvegarde backend termin√©e'
"@
    
    $backupStart = Get-Date
    $backupOutput = ssh $CONFIG.SSH_HOST $backupCmd
    $backupDuration = (Get-Date) - $backupStart
    
    if ($LASTEXITCODE -ne 0) { throw "‚ùå Backup backend failed" }
    
    # Log d√©tail sauvegarde
    if ($Verbose) {
        Write-LogMessage "üìÑ R√©sultat sauvegarde:" "White" -VerboseOnly
        $backupOutput | ForEach-Object { Write-LogMessage "   $_" "DarkGray" -VerboseOnly }
    }
    Write-LogMessage "‚úÖ Sauvegarde termin√©e en $($backupDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
    
    # √âtape 3: Installation app (1 seule connexion SSH)
    Write-ProgressLog "Application" "Installation et configuration..." 80
    Write-LogMessage "üîß Installation application dans $($CONFIG.APP_REMOTE)..." "Cyan"
    Write-LogMessage "üóÇÔ∏è Nettoyage dossier application..." "White" -VerboseOnly
    Write-LogMessage "üìã Copie nouveaux fichiers..." "White" -VerboseOnly
    Write-LogMessage "üîÑ Restauration backend..." "White" -VerboseOnly
    Write-LogMessage "üîó Cr√©ation lien symbolique index.html..." "White" -VerboseOnly
    Write-LogMessage "üîí Configuration permissions CSS/JS (CRITIQUE)..." "White" -VerboseOnly
    
    $installCmd = @"
echo 'D√©but installation application...' &&
sudo rm -rf $($CONFIG.APP_REMOTE)/* &&
echo 'Dossier application nettoy√©' &&
sudo cp -r /tmp/deploy-app-$($CONFIG.TIMESTAMP)/* $($CONFIG.APP_REMOTE)/ &&
echo 'Nouveaux fichiers copi√©s' &&
if [ -f /tmp/backend-backup-$($CONFIG.TIMESTAMP)/server.js ]; then
    sudo cp /tmp/backend-backup-$($CONFIG.TIMESTAMP)/server.js $($CONFIG.APP_REMOTE)/
    echo 'server.js restaur√©'
fi &&
if [ -f /tmp/backend-backup-$($CONFIG.TIMESTAMP)/package.json ]; then
    sudo cp /tmp/backend-backup-$($CONFIG.TIMESTAMP)/package.json $($CONFIG.APP_REMOTE)/
    echo 'package.json restaur√©'
fi &&
cd $($CONFIG.APP_REMOTE) &&
sudo ln -sf index-app.html index.html &&
echo 'Lien symbolique cr√©√©' &&
sudo chown -R www-data:www-data $($CONFIG.APP_REMOTE) &&
echo 'Propri√©taires modifi√©s' &&
sudo chmod -R 644 $($CONFIG.APP_REMOTE)/index*.html &&
echo 'Permissions HTML configur√©es' &&
sudo chmod -R 755 $($CONFIG.APP_REMOTE)/assets &&
echo 'Permissions assets configur√©es (755)' &&
sudo chmod -R 644 $($CONFIG.APP_REMOTE)/assets/* &&
echo 'Permissions fichiers assets configur√©es (644)' &&
sudo find $($CONFIG.APP_REMOTE)/assets -type d -exec chmod 755 {} + &&
echo 'Permissions dossiers assets finalis√©es' &&
rm -rf /tmp/deploy-app-$($CONFIG.TIMESTAMP) &&
rm -rf /tmp/backend-backup-$($CONFIG.TIMESTAMP) &&
echo 'Nettoyage temporaire termin√©' &&
ls -la $($CONFIG.APP_REMOTE) | head -3 &&
echo '--- Assets ---' &&
ls -la $($CONFIG.APP_REMOTE)/assets | head -3 &&
echo 'Application install√©e avec succ√®s'
"@
    
    $installStart = Get-Date
    $installOutput = ssh $CONFIG.SSH_HOST $installCmd
    $installDuration = (Get-Date) - $installStart
    
    if ($LASTEXITCODE -ne 0) { throw "‚ùå Installation app failed" }
    
    # Log des d√©tails d'installation
    if ($Verbose) {
        Write-LogMessage "üìÑ Sortie installation:" "White" -VerboseOnly
        $installOutput | ForEach-Object { Write-LogMessage "   $_" "DarkGray" -VerboseOnly }
    }
    
    Write-LogMessage "‚úÖ Installation termin√©e en $($installDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
    
    $totalDuration = (Get-Date) - $deployStart
    Write-ProgressLog "Application" "D√©ploiement termin√©" 100
    Write-LogMessage "‚úÖ Application d√©ploy√©e avec succ√®s en $($totalDuration.TotalSeconds.ToString('F1'))s" "Green"
}

function Test-Deployment {
    Write-LogMessage "üß™ TESTS DE VALIDATION" "Blue"
    Write-ProgressLog "Validation" "Tests de connectivit√©..." 25
    
    $testStart = Get-Date
    
    # Test connectivit√© serveur
    Write-LogMessage "üåê Test accessibilit√© des sites..." "Cyan" -VerboseOnly
    Write-LogMessage "üîó Test landing: https://dev.melyia.com..." "White" -VerboseOnly
    
    $landingTestStart = Get-Date
    $landingTest = ssh $CONFIG.SSH_HOST "curl -s -I http://localhost/dev-site/ | head -1"
    $landingTestDuration = (Get-Date) - $landingTestStart
    
    Write-ProgressLog "Validation" "Test application..." 75
    Write-LogMessage "üîó Test app: https://app-dev.melyia.com..." "White" -VerboseOnly
    
    $appTestStart = Get-Date
    $appTest = ssh $CONFIG.SSH_HOST "curl -s -I http://localhost/app-dev/ | head -1"
    $appTestDuration = (Get-Date) - $appTestStart
    
    # Validation landing
    if ($landingTest -match "(200|301|302)") {
        $landingDurationMs = $landingTestDuration.TotalMilliseconds.ToString('F0')
        Write-LogMessage "Landing accessible ($landingDurationMs ms)" "Green"
    } else {
        Write-LogMessage "Landing: $landingTest" "Yellow"
        Write-LogMessage "R√©ponse compl√®te: $landingTest" "White" -VerboseOnly
    }
    
    # Validation app
    if ($appTest -match "(200|301|302)") {
        $appDurationMs = $appTestDuration.TotalMilliseconds.ToString('F0')
        Write-LogMessage "App accessible ($appDurationMs ms)" "Green"
    } else {
        Write-LogMessage "App: $appTest" "Yellow"
        Write-LogMessage "R√©ponse compl√®te: $appTest" "White" -VerboseOnly
    }
    
    # Test permissions assets (critique pour CSS/JS)
    Write-LogMessage "üîí V√©rification permissions assets..." "Cyan" -VerboseOnly
    $permissionsTest = ssh $CONFIG.SSH_HOST "ls -la $($CONFIG.APP_REMOTE)/assets/ | head -2"
    Write-LogMessage "üìã Permissions assets: $($permissionsTest -split '`n' | Select-Object -Last 1)" "White" -VerboseOnly
    
    $totalTestDuration = (Get-Date) - $testStart
    Write-ProgressLog "Validation" "Tests termin√©s" 100
    Write-LogMessage "‚úÖ Validation termin√©e en $($totalTestDuration.TotalSeconds.ToString('F1'))s" "Green" -VerboseOnly
}

function Main {
    $startTime = Get-Date
    $deployedComponents = @()
    
    try {
        Write-LogMessage "üöÄ D√âPLOIEMENT S√âCURIS√â MANUEL MELYIA" "Green"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üõ°Ô∏è M√©thode √©prouv√©e 100% succ√®s" "Yellow"
        Write-LogMessage "‚ö° √âvite les timeouts SSH automatiquement" "Yellow"
        Write-LogMessage "üéØ Timestamp: $($CONFIG.TIMESTAMP)" "White" -VerboseOnly
        Write-LogMessage "üìã Mode: $(if($LandingOnly){'Landing uniquement'}elseif($AppOnly){'Application uniquement'}else{'Complet'})" "White" -VerboseOnly
        Write-LogMessage "üîß Verbose: $(if($Verbose){'Activ√©'}else{'D√©sactiv√©'})" "White" -VerboseOnly
        Write-LogMessage "‚è≠Ô∏è Build: $(if($SkipBuild){'Ignor√©'}else{'Automatique'})" "White" -VerboseOnly
        
        # Pr√©requis
        Write-ProgressLog "D√©ploiement Global" "V√©rification pr√©requis..." 5
        Test-Prerequisites
        
        # D√©ploiements selon param√®tres
        if (-not $AppOnly) {
            Write-ProgressLog "D√©ploiement Global" "D√©ploiement Landing..." 30
            Deploy-Landing
            $deployedComponents += "Landing"
        } else {
            Write-LogMessage "‚è≠Ô∏è Landing ignor√© (mode AppOnly)" "Yellow" -VerboseOnly
        }
        
        if (-not $LandingOnly) {
            Write-ProgressLog "D√©ploiement Global" "D√©ploiement Application..." 70
            Deploy-App
            $deployedComponents += "Application"
        } else {
            Write-LogMessage "‚è≠Ô∏è Application ignor√©e (mode LandingOnly)" "Yellow" -VerboseOnly
        }
        
        # Validation
        Write-ProgressLog "D√©ploiement Global" "Tests de validation..." 90
        Test-Deployment
        
        $duration = (Get-Date) - $startTime
        $componentsDeployed = $deployedComponents -join " + "
        
        # Calcul statistiques
        $landingSize = if (Test-Path $CONFIG.LANDING_LOCAL) { Get-FolderSize $CONFIG.LANDING_LOCAL } else { 0 }
        $appSize = if (Test-Path $CONFIG.APP_LOCAL) { Get-FolderSize $CONFIG.APP_LOCAL } else { 0 }
        $totalSize = $landingSize + $appSize
        
        Write-ProgressLog "D√©ploiement Global" "D√©ploiement termin√© avec succ√®s" 100
        
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üéâ D√âPLOIEMENT R√âUSSI" "Green"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "‚è±Ô∏è Dur√©e totale: $($duration.TotalSeconds.ToString('F1'))s" "White"
        Write-LogMessage "üì¶ Composants: $componentsDeployed" "White"
        Write-LogMessage "üìä Taille d√©ploy√©e: $totalSize MB" "White"
        Write-LogMessage "üî¢ SSH connexions: $(if($deployedComponents.Count -eq 2){6}elseif($deployedComponents.Count -eq 1){3}else{0})" "White" -VerboseOnly
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üåê URLS ACCESSIBLES:" "Green"
        Write-LogMessage "üìç Landing: https://dev.melyia.com" "White"
        Write-LogMessage "üìç App: https://app-dev.melyia.com" "White"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "‚úÖ S√âCURIT√â PR√âSERV√âE:" "Green"
        Write-LogMessage "üõ°Ô∏è Protection anti-brute force active" "White"
        Write-LogMessage "üîí Permissions CSS/JS corrig√©es automatiquement" "White"
        Write-LogMessage "üíæ Backend pr√©serv√© automatiquement" "White"
        Write-LogMessage "üßπ Fichiers temporaires nettoy√©s" "White"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üéØ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!" "Green"
        
    } catch {
        $duration = (Get-Date) - $startTime
        
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üí• ERREUR DE D√âPLOIEMENT" "Red"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "‚è±Ô∏è Temps √©coul√©: $($duration.TotalSeconds.ToString('F1'))s" "Yellow"
        Write-LogMessage "üì¶ Composants trait√©s: $($deployedComponents -join ', ')" "Yellow"
        Write-LogMessage "üí° Erreur: $($_.Exception.Message)" "Red"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üîß SOLUTIONS DE SECOURS:" "Yellow"
        Write-LogMessage "   1. npm run fix:permissions (si CSS/JS cass√©s)" "White"
        Write-LogMessage "   2. npm run security:status (v√©rifier protection)" "White"
        Write-LogMessage "   3. Attendre 10-15 min si timeout SSH puis retry" "White"
        Write-LogMessage "   4. npm run security:deploy (solution garantie)" "White"
        Write-LogMessage "========================================" "Cyan"
        Write-LogMessage "üö® V√©rifiez l'√©tat des sites manuellement:" "Red"
        Write-LogMessage "   - https://dev.melyia.com" "White"
        Write-LogMessage "   - https://app-dev.melyia.com" "White"
        Write-LogMessage "========================================" "Cyan"
        
        exit 1
    }
}

# Affichage aide si demand√©
if ($args -contains "-h" -or $args -contains "--help") {
    Write-Host @"
üöÄ SCRIPT D√âPLOIEMENT S√âCURIS√â MANUEL MELYIA

USAGE:
  .\deploy-safe-manual.ps1 [OPTIONS]

OPTIONS:
  -SkipBuild     Ignorer le build (utiliser builds existants)
  -LandingOnly   D√©ployer uniquement le landing
  -AppOnly       D√©ployer uniquement l'application
  -Verbose       Affichage d√©taill√©
  -h, --help     Afficher cette aide

EXEMPLES:
  .\deploy-safe-manual.ps1                    # D√©ploiement complet
  .\deploy-safe-manual.ps1 -LandingOnly       # Landing seulement
  .\deploy-safe-manual.ps1 -AppOnly -SkipBuild # App sans rebuild

AVANTAGES:
  ‚úÖ 100% de succ√®s (m√©thode √©prouv√©e)
  ‚úÖ √âvite les timeouts SSH automatiquement
  ‚úÖ Pr√©serve la s√©curit√© (pas de d√©sactivation protection)
  ‚úÖ Correction permissions CSS/JS automatique
  ‚úÖ Sauvegarde backend automatique

DUR√âE: 2-3 minutes typique
"@
    exit 0
}

# Lancement du script principal
Main 