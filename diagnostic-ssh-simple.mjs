// üîç DIAGNOSTIC SSH SIMPLIFI√â - TESTS ESSENTIELS RAPIDES
// Version optimis√©e pour Windows sans timeouts

import fs from "fs";
import { execSync } from "child_process";

const CONFIG = {
  SSH: {
    user: "ubuntu",
    host: "51.91.145.255",
    keyPath: process.env.USERPROFILE + "\\.ssh\\melyia_main",
    connectTimeout: 30,
  },
};

function log(message, color = "cyan") {
  const colors = {
    green: "\x1b[32m",
    red: "\x1b[31m",
    yellow: "\x1b[33m",
    cyan: "\x1b[36m",
    blue: "\x1b[34m",
    magenta: "\x1b[35m",
    white: "\x1b[37m",
    reset: "\x1b[0m",
  };

  const timestamp = new Date().toLocaleTimeString();
  console.log(`${colors[color]}[${timestamp}] ${message}${colors.reset}`);
}

function buildSSHCommand() {
  const options = [
    `-o ConnectTimeout=${CONFIG.SSH.connectTimeout}`,
    `-o BatchMode=yes`,
    `-o StrictHostKeyChecking=no`,
    `-o LogLevel=ERROR`,
  ];

  if (fs.existsSync(CONFIG.SSH.keyPath)) {
    options.push(`-i "${CONFIG.SSH.keyPath}"`);
  }

  return `ssh ${options.join(" ")} ${CONFIG.SSH.user}@${CONFIG.SSH.host}`;
}

function runTest(testName, command, timeout = 30000) {
  try {
    log(`üîÑ Test: ${testName}...`, "blue");
    const startTime = Date.now();

    const result = execSync(command, {
      encoding: "utf8",
      timeout,
      stdio: ["ignore", "pipe", "pipe"],
    });

    const duration = ((Date.now() - startTime) / 1000).toFixed(1);
    log(`‚úÖ ${testName} - R√©ussi en ${duration}s`, "green");

    return {
      success: true,
      duration: parseFloat(duration),
      result: result.trim(),
    };
  } catch (error) {
    const duration = ((Date.now() - startTime) / 1000).toFixed(1);
    log(`‚ùå ${testName} - √âchou√© apr√®s ${duration}s`, "red");
    log(`üí° Erreur: ${error.message}`, "yellow");

    return {
      success: false,
      duration: parseFloat(duration),
      error: error.message,
    };
  }
}

function main() {
  const startTime = Date.now();

  log("üîç DIAGNOSTIC SSH SIMPLIFI√â - TESTS ESSENTIELS", "magenta");
  log("============================================", "magenta");
  log("");

  const results = {
    summary: { totalTests: 0, successfulTests: 0, failedTests: 0 },
    tests: [],
    recommendations: [],
  };

  const sshBase = buildSSHCommand();

  // Test 1: Connectivit√© de base
  const test1 = runTest(
    "Connectivit√© SSH de base",
    `${sshBase} "echo 'SSH-CONNECTIVITY-OK'"`,
    30000
  );
  results.tests.push({ name: "Connectivit√© SSH", ...test1 });
  results.summary.totalTests++;
  if (test1.success) results.summary.successfulTests++;
  else results.summary.failedTests++;

  // Test 2: Informations syst√®me
  if (test1.success) {
    const test2 = runTest(
      "Informations syst√®me",
      `${sshBase} "date && uptime && whoami"`,
      20000
    );
    results.tests.push({ name: "Informations syst√®me", ...test2 });
    results.summary.totalTests++;
    if (test2.success) results.summary.successfulTests++;
    else results.summary.failedTests++;
  }

  // Test 3: Permissions web
  if (test1.success) {
    const test3 = runTest(
      "V√©rification permissions web",
      `${sshBase} "ls -la /var/www/melyia/ | head -3"`,
      20000
    );
    results.tests.push({ name: "Permissions web", ...test3 });
    results.summary.totalTests++;
    if (test3.success) results.summary.successfulTests++;
    else results.summary.failedTests++;
  }

  // Test 4: Espace disque
  if (test1.success) {
    const test4 = runTest(
      "Espace disque disponible",
      `${sshBase} "df -h / | tail -1"`,
      15000
    );
    results.tests.push({ name: "Espace disque", ...test4 });
    results.summary.totalTests++;
    if (test4.success) results.summary.successfulTests++;
    else results.summary.failedTests++;
  }

  // Test 5: Services web
  if (test1.success) {
    const test5 = runTest(
      "√âtat des services web",
      `${sshBase} "sudo systemctl is-active nginx && pm2 status --silent | head -3"`,
      25000
    );
    results.tests.push({ name: "Services web", ...test5 });
    results.summary.totalTests++;
    if (test5.success) results.summary.successfulTests++;
    else results.summary.failedTests++;
  }

  // G√©n√©ration des recommandations
  if (results.summary.successfulTests === 0) {
    results.recommendations.push(
      "V√©rifier la connectivit√© r√©seau et les cl√©s SSH"
    );
    results.recommendations.push("Confirmer que le serveur est accessible");
  } else if (results.summary.successfulTests < results.summary.totalTests) {
    results.recommendations.push(
      "Certains tests ont √©chou√© - v√©rifier les permissions"
    );
    results.recommendations.push("V√©rifier les services nginx et PM2");
  } else {
    results.recommendations.push(
      "Tous les tests sont pass√©s - SSH optimis√© pr√™t"
    );
  }

  // R√©sum√© final
  const totalDuration = ((Date.now() - startTime) / 1000).toFixed(1);

  log("", "white");
  log("üìä R√âSUM√â DU DIAGNOSTIC", "blue");
  log("======================", "blue");
  log(`‚è±Ô∏è Dur√©e totale: ${totalDuration}s`, "cyan");
  log(
    `üìä Tests: ${results.summary.successfulTests}/${results.summary.totalTests} r√©ussis`,
    "cyan"
  );

  if (results.summary.successfulTests === results.summary.totalTests) {
    log("‚úÖ DIAGNOSTIC COMPLET: Tous les tests SSH passent", "green");
    log("üéØ Le syst√®me est pr√™t pour le d√©ploiement", "green");
  } else if (results.summary.successfulTests > 0) {
    log("‚ö†Ô∏è DIAGNOSTIC PARTIEL: Certains probl√®mes d√©tect√©s", "yellow");
    log("üí° Le d√©ploiement peut fonctionner avec limitations", "yellow");
  } else {
    log("‚ùå DIAGNOSTIC √âCHOU√â: Probl√®mes SSH majeurs", "red");
    log("üö® R√©soudre les probl√®mes avant d√©ploiement", "red");
  }

  log("", "white");
  log("üí° RECOMMANDATIONS:", "blue");
  results.recommendations.forEach((rec) => {
    log(`  ‚Ä¢ ${rec}`, "cyan");
  });

  // Sauvegarde du rapport
  const reportFile = `diagnostic-ssh-simple-${Date.now()}.json`;
  try {
    fs.writeFileSync(reportFile, JSON.stringify(results, null, 2));
    log("", "white");
    log(`üìÑ Rapport sauvegard√©: ${reportFile}`, "green");
  } catch (error) {
    log(`‚ö†Ô∏è Impossible de sauvegarder le rapport: ${error.message}`, "yellow");
  }

  log("", "white");
  log("üîß COMMANDES SUIVANTES RECOMMAND√âES:", "blue");
  if (results.summary.successfulTests >= 3) {
    log("  npm run deploy:full          # D√©ploiement complet", "green");
  } else {
    log("  npm run deploy:ssh-test      # Test de base", "yellow");
  }

  // Code de sortie
  if (results.summary.successfulTests === 0) {
    process.exit(1);
  }
}

main();
