#!/usr/bin/env node

/**
 * BACKUP & RESTORE CONFIGURATION LLM - v36
 * =========================================
 * Script de sauvegarde et restauration s√©curis√©e
 * de la configuration LLM pour rollback imm√©diat
 */

import axios from "axios";
import fs from "fs";
import path from "path";

const API_BASE = "https://app-dev.melyia.com/api";
const BACKUP_DIR = "./audit/versions/v36/backup-configs";

// Compte admin pour gestion configuration
const ADMIN_CREDENTIALS = {
  email: "brice@melyia.com",
  password: "password"
};

/**
 * Connexion admin
 */
async function loginAdmin() {
  try {
    console.log("üîê [BACKUP] Connexion admin...");
    
    const response = await axios.post(`${API_BASE}/auth/login`, ADMIN_CREDENTIALS);

    if (response.data.success) {
      console.log("‚úÖ [BACKUP] Admin connect√©");
      return response.data.token;
    }
    
    throw new Error("Login admin failed");
  } catch (error) {
    console.error("‚ùå [BACKUP] Erreur connexion admin:", error.response?.data || error.message);
    return null;
  }
}

/**
 * Sauvegarder configuration LLM actuelle
 */
async function backupCurrentConfig(token) {
  try {
    console.log("üíæ [BACKUP] Sauvegarde configuration actuelle...");
    
    // Cr√©er le dossier de backup s'il n'existe pas
    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
    }

    // R√©cup√©rer configuration actuelle
    const response = await axios.get(`${API_BASE}/admin/llm-config`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (!response.data.success) {
      throw new Error("Impossible de r√©cup√©rer la configuration");
    }

    const config = response.data.data;
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFile = path.join(BACKUP_DIR, `llm-config-backup-${timestamp}.json`);

    // Sauvegarder avec m√©tadonn√©es
    const backupData = {
      timestamp: new Date().toISOString(),
      version: "v36_backup",
      reason: "Avant correction configuration critique",
      originalConfig: config,
      backupFile: backupFile
    };

    fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));

    console.log("‚úÖ [BACKUP] Configuration sauvegard√©e:");
    console.log(`   üìÅ Fichier: ${backupFile}`);
    console.log(`   ‚öôÔ∏è Model: ${config.modelName}`);
    console.log(`   üå°Ô∏è Temperature: ${config.temperature}`);
    console.log(`   üìù MaxTokens: ${config.maxTokens}`);
    console.log(`   üõë StopSequences: ${JSON.stringify(config.stopSequences)}`);

    return backupFile;

  } catch (error) {
    console.error("‚ùå [BACKUP] Erreur sauvegarde:", error.response?.data || error.message);
    return null;
  }
}

/**
 * Restaurer configuration depuis un backup
 */
async function restoreConfig(token, backupFile) {
  try {
    console.log(`üîÑ [RESTORE] Restauration depuis: ${backupFile}`);

    if (!fs.existsSync(backupFile)) {
      throw new Error(`Fichier backup non trouv√©: ${backupFile}`);
    }

    // Lire le backup
    const backupData = JSON.parse(fs.readFileSync(backupFile, 'utf8'));
    const config = backupData.originalConfig;

    console.log("üìã [RESTORE] Configuration √† restaurer:");
    console.log(`   ‚öôÔ∏è Model: ${config.modelName}`);
    console.log(`   üå°Ô∏è Temperature: ${config.temperature}`);
    console.log(`   üìù MaxTokens: ${config.maxTokens}`);

    // Restaurer via API
    const updatePayload = {
      systemPrompt: config.systemPrompt,
      systemPromptUrgence: config.systemPromptUrgence,
      temperature: config.temperature,
      topP: config.topP,
      maxTokens: config.maxTokens,
      numCtx: config.numCtx,
      stopSequences: config.stopSequences,
      keepAliveMinutes: config.keepAliveMinutes,
      timeoutSeconds: config.timeoutSeconds,
      modelName: config.modelName
    };

    const response = await axios.put(`${API_BASE}/admin/llm-config`, updatePayload, {
      headers: { 
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
    });

    if (response.data.success) {
      console.log("‚úÖ [RESTORE] Configuration restaur√©e avec succ√®s");
      return true;
    } else {
      throw new Error(response.data.message || "Erreur restauration");
    }

  } catch (error) {
    console.error("‚ùå [RESTORE] Erreur restauration:", error.response?.data || error.message);
    return false;
  }
}

/**
 * Appliquer nouvelle configuration optimis√©e
 */
async function applyNewConfig(token, newConfig) {
  try {
    console.log("üîß [UPDATE] Application nouvelle configuration...");

    console.log("üìã [UPDATE] Nouvelle configuration:");
    console.log(`   ‚öôÔ∏è Model: ${newConfig.modelName}`);
    console.log(`   üå°Ô∏è Temperature: ${newConfig.temperature}`);
    console.log(`   üìù MaxTokens: ${newConfig.maxTokens}`);
    console.log(`   üõë StopSequences: ${JSON.stringify(newConfig.stopSequences)}`);
    console.log(`   üí¨ SystemPrompt: ${newConfig.systemPrompt.substring(0, 50)}...`);

    const response = await axios.put(`${API_BASE}/admin/llm-config`, newConfig, {
      headers: { 
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
    });

    if (response.data.success) {
      console.log("‚úÖ [UPDATE] Nouvelle configuration appliqu√©e");
      return true;
    } else {
      throw new Error(response.data.message || "Erreur mise √† jour");
    }

  } catch (error) {
    console.error("‚ùå [UPDATE] Erreur application config:", error.response?.data || error.message);
    return false;
  }
}

/**
 * Lister les backups disponibles
 */
function listBackups() {
  try {
    console.log("üìÇ [BACKUPS] Backups disponibles:");

    if (!fs.existsSync(BACKUP_DIR)) {
      console.log("   Aucun backup trouv√©");
      return [];
    }

    const files = fs.readdirSync(BACKUP_DIR)
      .filter(file => file.startsWith('llm-config-backup-') && file.endsWith('.json'))
      .sort()
      .reverse(); // Plus r√©cent en premier

    files.forEach((file, index) => {
      const filePath = path.join(BACKUP_DIR, file);
      const stats = fs.statSync(filePath);
      console.log(`   ${index + 1}. ${file} (${stats.mtime.toISOString()})`);
    });

    return files.map(file => path.join(BACKUP_DIR, file));

  } catch (error) {
    console.error("‚ùå [BACKUPS] Erreur listage:", error.message);
    return [];
  }
}

/**
 * Configuration LLM optimis√©e pour contexte m√©dical dentaire
 */
const CONFIG_OPTIMISEE_MEDICALE = {
  systemPrompt: `Tu es un assistant dentaire fran√ßais expert et bienveillant sp√©cialis√© dans l'accompagnement des patients.

CONTEXTE : Tu r√©ponds √† des patients qui ont des questions sur leurs soins dentaires, interventions ou pr√©occupations bucco-dentaires.

INSTRUCTIONS :
- R√©ponds TOUJOURS en fran√ßais, de mani√®re professionnelle et rassurante
- Utilise un ton empathique et compr√©hensif
- Fournis des informations m√©dicales pr√©cises et fiables
- Donne des conseils pratiques concrets quand appropri√©
- Encourage √† consulter le dentiste pour les cas n√©cessitant un examen
- Limite tes r√©ponses √† 120-150 mots maximum pour √™tre concis
- Structure tes r√©ponses avec des conseils clairs et actionnables

RAPPEL : Tu n'es pas un substitut √† une consultation m√©dicale, mais un guide informatif et rassurant.`,

  systemPromptUrgence: `Tu es un assistant dentaire d'urgence fran√ßais.

CONTEXTE URGENT : Le patient exprime une douleur intense, une urgence ou une pr√©occupation critique.

PRIORIT√âS :
1. RASSURER imm√©diatement le patient
2. √âVALUER la gravit√© de la situation
3. DONNER des conseils imm√©diats appropri√©s
4. ORIENTER vers une consultation rapide si n√©cessaire
5. FOURNIR des mesures de soulagement temporaires

INSTRUCTIONS :
- Commence par reconna√Ætre la douleur/urgence
- Donne des conseils de soulagement imm√©diat (antalgiques, mesures simples)
- Indique clairement quand consulter en urgence
- Reste calme et professionnel
- Limite √† 100-120 mots pour r√©ponse rapide

URGENCE = r√©ponse rapide et orientation appropri√©e.`,

  temperature: 0.2,
  topP: 0.8,
  maxTokens: 180,
  numCtx: 2048,
  stopSequences: [], // IMPORTANT : Pas de stopSequences pr√©matur√©es
  keepAliveMinutes: 30,
  timeoutSeconds: 15,
  modelName: "llama3.2:3b"
};

/**
 * Ex√©cution selon arguments de ligne de commande
 */
async function main() {
  const args = process.argv.slice(2);
  const action = args[0];

  console.log("üõ†Ô∏è [MAIN] BACKUP & RESTORE CONFIG LLM v36");
  console.log("==========================================");

  const token = await loginAdmin();
  if (!token) {
    console.error("‚ùå Impossible de se connecter en admin");
    process.exit(1);
  }

  switch (action) {
    case 'backup':
      const backupFile = await backupCurrentConfig(token);
      if (backupFile) {
        console.log(`‚úÖ Backup cr√©√©: ${backupFile}`);
      } else {
        process.exit(1);
      }
      break;

    case 'restore':
      const backupToRestore = args[1];
      if (!backupToRestore) {
        console.log("Usage: node backup-restore-llm-config.mjs restore <backup-file>");
        listBackups();
        process.exit(1);
      }
      const restored = await restoreConfig(token, backupToRestore);
      if (!restored) process.exit(1);
      break;

    case 'apply-optimized':
      console.log("üîß [APPLY] Application configuration optimis√©e m√©dicale...");
      const applied = await applyNewConfig(token, CONFIG_OPTIMISEE_MEDICALE);
      if (!applied) process.exit(1);
      break;

    case 'backup-and-apply':
      console.log("üîÑ [COMBO] Backup + Application configuration optimis√©e...");
      const backup = await backupCurrentConfig(token);
      if (!backup) process.exit(1);
      
      const success = await applyNewConfig(token, CONFIG_OPTIMISEE_MEDICALE);
      if (!success) {
        console.log("‚ö†Ô∏è √âchec application, restauration automatique...");
        await restoreConfig(token, backup);
        process.exit(1);
      }
      console.log("‚úÖ Configuration optimis√©e appliqu√©e avec succ√®s");
      break;

    case 'list':
      listBackups();
      break;

    default:
      console.log("Usage:");
      console.log("  backup                 - Sauvegarder config actuelle");
      console.log("  restore <file>         - Restaurer depuis backup");
      console.log("  apply-optimized        - Appliquer config optimis√©e");
      console.log("  backup-and-apply       - Backup + appliquer optimis√©e");
      console.log("  list                   - Lister backups disponibles");
      break;
  }
}

// Ex√©cution
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error("‚ùå [FATAL]", error.message);
    process.exit(1);
  });
}

export { backupCurrentConfig, restoreConfig, applyNewConfig, CONFIG_OPTIMISEE_MEDICALE }; 