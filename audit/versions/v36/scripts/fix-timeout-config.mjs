#!/usr/bin/env node

/**
 * FIX TIMEOUT CONFIG v36
 * ======================
 * Correction du probl√®me de timeout avec configuration plus rapide
 */

import axios from "axios";

const API_BASE = "https://app-dev.melyia.com/api";

// Configuration optimis√©e pour rapidit√© ET qualit√©
const CONFIG_RAPIDE_OPTIMISEE = {
  systemPrompt: `Tu es un assistant dentaire fran√ßais expert.

MISSION : Aider les patients avec leurs questions dentaires.

R√àGLES :
- R√©ponds en fran√ßais, ton professionnel et rassurant
- Donne des conseils m√©dicaux fiables et pratiques  
- Encourage la consultation si n√©cessaire
- Maximum 100 mots, sois concis et clair
- Structure : diagnostic + conseil + action

Tu es un guide m√©dical, pas un substitut au dentiste.`,

  systemPromptUrgence: `Assistant dentaire d'urgence fran√ßais.

URGENCE D√âTECT√âE - Actions imm√©diates :
1. Rassurer le patient
2. Conseils soulagement imm√©diat
3. Orienter vers consultation urgente si n√©cessaire

Instructions :
- Reconnais la douleur/urgence
- Conseils antalgiques simples
- Indique quand consulter en urgence
- Maximum 80 mots, sois rapide et pr√©cis

Urgence = r√©ponse rapide + orientation.`,

  temperature: 0.1, // Plus d√©terministe = plus rapide
  topP: 0.7,
  maxTokens: 120, // R√©duit pour rapidit√©
  numCtx: 1536, // R√©duit pour rapidit√©
  stopSequences: [], 
  keepAliveMinutes: 30,
  timeoutSeconds: 20, // Augment√© pour s√©curit√©
  modelName: "llama3.2:3b"
};

async function loginAdmin() {
  const response = await axios.post(`${API_BASE}/auth/login`, {
    email: "brice@melyia.com",
    password: "password"
  });
  return response.data.token;
}

async function applyFastConfig() {
  console.log("‚ö° [FIX] APPLICATION CONFIG RAPIDE v36");
  console.log("=====================================");

  try {
    const token = await loginAdmin();
    
    console.log("üîß [CONFIG] Application configuration rapide...");
    console.log("   üå°Ô∏è Temperature: 0.1 (plus d√©terministe)");
    console.log("   üìù MaxTokens: 120 (r√©duit)");
    console.log("   ‚è±Ô∏è Timeout: 20s (augment√©)");
    console.log("   üß† NumCtx: 1536 (optimis√©)");
    console.log("   üìã Prompts: Raccourcis pour rapidit√©");

    const response = await axios.put(`${API_BASE}/admin/llm-config`, CONFIG_RAPIDE_OPTIMISEE, {
      headers: { 
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.data.success) {
      console.log("‚úÖ [CONFIG] Configuration rapide appliqu√©e");
      
      // Test rapide de validation
      console.log("\nüß™ [TEST] Test rapide post-configuration...");
      
      const authPatient = await axios.post(`${API_BASE}/auth/login`, {
        email: "patient@melyia.com",
        password: "test123"
      });

      const testStart = Date.now();
      const testResponse = await axios.post(`${API_BASE}/chat`, {
        message: "J'ai mal √† une dent, que faire ?",
        patientId: authPatient.data.user.id
      }, {
        headers: { Authorization: `Bearer ${authPatient.data.token}` },
        timeout: 25000
      });

      const testTime = Date.now() - testStart;

      if (testResponse.data.success) {
        console.log(`‚úÖ [TEST] R√©ponse re√ßue en ${testTime}ms`);
        console.log(`üìù [TEST] R√©ponse: "${testResponse.data.response.substring(0, 100)}..."`);
        
        if (testTime < 15000) {
          console.log("üöÄ [SUCCESS] Configuration rapide valid√©e !");
          return true;
        } else {
          console.log("‚ö†Ô∏è [WARNING] Encore un peu lent, mais fonctionnel");
          return true;
        }
      } else {
        console.log("‚ùå [TEST] Test √©chou√©:", testResponse.data.error);
        return false;
      }

    } else {
      console.log("‚ùå [CONFIG] √âchec application configuration");
      return false;
    }

  } catch (error) {
    console.error("‚ùå [ERROR]", error.response?.data || error.message);
    return false;
  }
}

applyFastConfig()
  .then(success => {
    if (success) {
      console.log("\n‚úÖ [FINAL] Configuration rapide appliqu√©e et valid√©e");
      process.exit(0);
    } else {
      console.log("\n‚ùå [FINAL] √âchec de l'optimisation");
      process.exit(1);
    }
  }); 