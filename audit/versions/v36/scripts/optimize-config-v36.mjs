#!/usr/bin/env node

/**
 * OPTIMISATION CONFIGURATION LLM v36
 * ===================================
 * Script d'optimisation cibl√©e pour am√©liorer
 * la qualit√© des r√©ponses du chatbot dentaire
 */

import axios from "axios";

const API_BASE = "https://app-dev.melyia.com/api";

/**
 * Configurations optimis√©es pour diff√©rents objectifs
 */
const CONFIGURATIONS = {
  // Configuration actuelle (probl√©matique)
  current: {
    name: "Configuration actuelle (v36.2)",
    description: "Configuration ultra-rapide mais qualit√© insuffisante",
    config: {
      temperature: 0.05,
      maxTokens: 60,
      timeoutSeconds: 25,
      systemPrompt: "Dentiste fran√ßais. R√©ponds en 50 mots max. Sois rassurant et donne un conseil pratique.",
      systemPromptUrgence: "Urgence dentaire. Rassure, donne conseil imm√©diat, oriente vers consultation. 30 mots max."
    }
  },
  
  // Configuration conservative (recommand√©e v36.3)
  conservative: {
    name: "Configuration conservative (v36.3 - recommand√©e)",
    description: "Am√©lioration graduelle sans risque de timeout",
    config: {
      temperature: 0.15,  // Augmentation prudente depuis 0.05
      topP: 0.8,          // Diversit√© contr√¥l√©e
      maxTokens: 90,      // Augmentation mod√©r√©e depuis 60
      numCtx: 1024,       // Contexte standard
      timeoutSeconds: 30,  // Timeout s√©curis√©
      keepAliveMinutes: 30, // Keep-alive standard
      stopSequences: ["\\n\\n", ".", "!", "?", "---"], // Stop sequences √©quilibr√©s
      systemPrompt: `Assistant dentaire fran√ßais expert. 
R√©ponds de mani√®re professionnelle et rassurante:
- Analyse le dossier patient
- Conseils pratiques pr√©cis
- Orientation consultation si n√©cessaire
- Maximum 80 mots, clair et empathique`,
      
      systemPromptUrgence: `URGENCE DENTAIRE - Assistant expert fran√ßais.
√âvalue rapidement:
- Rassure le patient
- Conseil imm√©diat de soulagement  
- Indique quand consulter EN URGENCE
- Maximum 60 mots, pr√©cis et rassurant

Douleur intense = consultation imm√©diate.`
    }
  },

  // Configuration √©quilibr√©e (recommand√©e)
  balanced: {
    name: "Configuration √©quilibr√©e (v36.3 - risque timeout)",
    description: "√âquilibre qualit√©/performance pour usage m√©dical",
    config: {
      temperature: 0.3,  // Plus de cr√©ativit√© pour r√©ponses naturelles
      topP: 0.9,         // Diversit√© lexicale appropri√©e
      maxTokens: 150,    // R√©ponses plus compl√®tes mais raisonnables
      numCtx: 2048,      // Contexte √©largi pour meilleure compr√©hension
      timeoutSeconds: 35, // Timeout l√©g√®rement augment√©
      keepAliveMinutes: 45, // Keep-alive optimis√©
      stopSequences: ["\\n\\n\\n", "---", "QUESTION:"], // Stop sequences moins agressifs
      systemPrompt: `Tu es un assistant dentaire fran√ßais expert et bienveillant. 
Analyse le dossier patient et r√©ponds de mani√®re:
- Professionnelle et rassurante
- Pr√©cise m√©dicalement  
- Avec conseils pratiques concrets
- En 80-120 mots maximum

Toujours orienter vers consultation si n√©cessaire.`,
      
      systemPromptUrgence: `URGENCE DENTAIRE - Assistant expert fran√ßais.
√âvalue rapidement la situation et:
- Rassure le patient
- Donne conseil imm√©diat de soulagement
- Indique quand consulter EN URGENCE
- Sois pr√©cis et rassurant
- 60-90 mots maximum

Si douleur intense ou trauma: consultation imm√©diate obligatoire.`
    }
  },

  // Configuration qualit√© maximale (pour comparaison)
  quality: {
    name: "Configuration qualit√© maximale",
    description: "Priorit√© qualit√©/pr√©cision (temps de r√©ponse plus lent)",
    config: {
      temperature: 0.4,
      topP: 0.85,
      maxTokens: 200,
      numCtx: 3072,
      timeoutSeconds: 45,
      systemPrompt: `Tu es un assistant dentaire fran√ßais expert, dipl√¥m√© et exp√©riment√©.

MISSION: Fournir des conseils dentaires pr√©cis, professionnels et rassurants.

INSTRUCTIONS:
- Analyse le dossier patient avec attention
- R√©ponds avec empathie et professionnalisme  
- Donne des conseils pratiques et applicables
- Indique clairement quand consulter
- Utilise un vocabulaire accessible mais pr√©cis
- Maximum 150 mots, bien structur√©s

TOUJOURS: Privil√©gier s√©curit√© patient et orientation vers professionnel.`,

      systemPromptUrgence: `URGENCE DENTAIRE - Expert consultant fran√ßais

PROTOCOLE URGENCE:
1. √âvaluer gravit√© rapidement
2. Rassurer avec empathie
3. Conseil soulagement imm√©diat
4. Orientation consultation appropri√©e
5. Pr√©ciser d√©lai (imm√©diat/24h/48h)

SIGNES D'ALARME: Douleur intense, trauma, infection, saignement important
‚Üí Consultation IMM√âDIATE obligatoire

R√©ponse: 80-120 mots, claire et structur√©e.`
    }
  }
};

/**
 * Connexion admin
 */
async function loginAdmin() {
  try {
    console.log("üîê [AUTH] Connexion admin...");
    
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: "brice@melyia.com",
      password: "password",
    });

    if (response.data.success) {
      console.log("‚úÖ [AUTH] Connect√© en tant qu'admin");
      return response.data.token;
    }
    
    throw new Error("Login failed");
  } catch (error) {
    console.error("‚ùå [AUTH] Erreur connexion:", error.response?.data || error.message);
    return null;
  }
}

/**
 * Appliquer une configuration
 */
async function applyConfiguration(token, configName) {
  try {
    const configData = CONFIGURATIONS[configName];
    if (!configData) {
      throw new Error(`Configuration '${configName}' non trouv√©e`);
    }
    
    console.log(`üîß [APPLY] Application configuration: ${configData.name}`);
    console.log(`üìù [APPLY] Description: ${configData.description}`);
    
    const response = await axios.put(`${API_BASE}/admin/llm-config`, configData.config, {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (response.data.success) {
      console.log("‚úÖ [APPLY] Configuration appliqu√©e avec succ√®s");
      console.log(`   üå°Ô∏è Temp√©rature: ${configData.config.temperature}`);
      console.log(`   üîß Max tokens: ${configData.config.maxTokens}`);
      console.log(`   ‚è±Ô∏è Timeout: ${configData.config.timeoutSeconds}s`);
      return response.data.data;
    }
    
    throw new Error("Failed to apply config");
  } catch (error) {
    console.error("‚ùå [APPLY] Erreur application config:", error.response?.data || error.message);
    return null;
  }
}

/**
 * R√©cup√©rer la configuration actuelle
 */
async function getCurrentConfig(token) {
  try {
    console.log("üì• [GET] R√©cup√©ration configuration actuelle...");
    
    const response = await axios.get(`${API_BASE}/admin/llm-config`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (response.data.success) {
      return response.data.data;
    }
    
    throw new Error("Failed to get config");
  } catch (error) {
    console.error("‚ùå [GET] Erreur r√©cup√©ration:", error.response?.data || error.message);
    return null;
  }
}

/**
 * Afficher les configurations disponibles
 */
function listConfigurations() {
  console.log("üìã [LIST] CONFIGURATIONS DISPONIBLES");
  console.log("=".repeat(60));
  
  Object.entries(CONFIGURATIONS).forEach(([key, config]) => {
    console.log(`üîß ${key.toUpperCase()}: ${config.name}`);
    console.log(`   üìù ${config.description}`);
    console.log(`   üå°Ô∏è Temp√©rature: ${config.config.temperature}`);
    console.log(`   üîß Max tokens: ${config.config.maxTokens}`);
    console.log(`   ‚è±Ô∏è Timeout: ${config.config.timeoutSeconds}s`);
    console.log("");
  });
}

/**
 * Afficher la configuration actuelle
 */
async function showCurrentConfig() {
  const token = await loginAdmin();
  if (!token) return;
  
  const config = await getCurrentConfig(token);
  if (!config) return;
  
  console.log("üìä [CURRENT] CONFIGURATION ACTUELLE");
  console.log("=".repeat(50));
  console.log(`ü§ñ Mod√®le: ${config.modelName}`);
  console.log(`üå°Ô∏è Temp√©rature: ${config.temperature}`);
  console.log(`üîß Max tokens: ${config.maxTokens}`);
  console.log(`‚è±Ô∏è Timeout: ${config.timeoutSeconds}s`);
  console.log(`üß† Contexte: ${config.numCtx || 'N/A'}`);
  console.log(`üìù Prompt syst√®me: ${config.systemPrompt?.substring(0, 80)}...`);
}

// Interface en ligne de commande
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'apply':
    const configName = args[1];
    if (!configName || !CONFIGURATIONS[configName]) {
      console.error("‚ùå Usage: node optimize-config-v36.mjs apply [current|conservative|balanced|quality]");
      console.error("üí° Utilisez 'list' pour voir les configurations disponibles");
      process.exit(1);
    }
    
    (async () => {
      const token = await loginAdmin();
      if (token) {
        await applyConfiguration(token, configName);
      }
    })();
    break;
    
  case 'list':
    listConfigurations();
    break;
    
  case 'current':
    showCurrentConfig();
    break;
    
  default:
    console.log("üîß OPTIMISATION CONFIGURATION LLM v36");
    console.log("=====================================");
    console.log("");
    console.log("Commandes disponibles :");
    console.log("  apply [config]            - Appliquer une configuration");
    console.log("  list                      - Lister les configurations disponibles");  
    console.log("  current                   - Afficher la configuration actuelle");
    console.log("");
    console.log("Configurations disponibles : current, conservative, balanced, quality");
    console.log("");
    console.log("Exemples :");
    console.log("  node optimize-config-v36.mjs list");
    console.log("  node optimize-config-v36.mjs current");
    console.log("  node optimize-config-v36.mjs apply conservative  # Recommand√©");
    console.log("  node optimize-config-v36.mjs apply balanced     # Risque timeout");
    console.log("");
    console.log("‚ö†Ô∏è  IMPORTANT: Toujours cr√©er un backup avant optimisation!");
} 