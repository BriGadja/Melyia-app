# PROJET MELYIA - MÉTHODOLOGIE DE DÉVELOPPEMENT OBLIGATOIRE v30.1

## 🎯 MÉTHODOLOGIE PAR MICRO-INCRÉMENTS - RÈGLE FONDAMENTALE

**APPROCHE OBLIGATOIRE** : Cette méthodologie DOIT être suivie pour TOUS les travaux futurs sur le projet Melyia.

### 📋 WORKFLOW OBLIGATOIRE POUR CHAQUE TÂCHE

#### 1. **PRÉPARATION SYSTÉMATIQUE**

```powershell
# ✅ TOUJOURS commencer par synchroniser les données serveur
.\dev\sync-essential.ps1

# ✅ Vérifier que les fichiers sont à jour
# server.js > 40KB + schema-current.txt > 5KB + package.json présent
```

#### 2. **DÉCOUPAGE EN MICRO-ÉTAPES**

- ✅ **Diviser chaque tâche** en micro-étapes de 15-30 minutes maximum
- ✅ **Une seule fonctionnalité** par micro-étape
- ✅ **Objectif mesurable** et testable pour chaque étape
- ✅ **Validation indépendante** de chaque étape avant de passer à la suivante

#### 3. **TESTS D'AUDIT AVANT MODIFICATIONS**

```javascript
// ✅ TOUJOURS créer un script de test AVANT les modifications
// test-[fonctionnalite]-audit.mjs
import axios from "axios";

async function auditCurrentState() {
  // Tester l'état actuel du système
  // Identifier les points de référence
  // Documenter le comportement existant
}
```

#### 4. **DÉVELOPPEMENT INCRÉMENTAL**

- ✅ **Modifications minimales** à chaque fois
- ✅ **Un seul fichier** à la fois si possible
- ✅ **Respect des conventions** ES Modules + camelCase + PowerShell
- ✅ **Cohérence** interfaces TypeScript avec backend

#### 5. **TESTS DE VALIDATION APRÈS MODIFICATIONS**

```javascript
// ✅ TOUJOURS créer un script de validation APRÈS les modifications
// test-[fonctionnalite]-validation.mjs
async function validateChanges() {
  // Tester que les modifications fonctionnent
  // Vérifier qu'aucune régression n'a été introduite
  // Confirmer que l'objectif de la micro-étape est atteint
}
```

#### 6. **DOCUMENTATION ET NETTOYAGE**

- ✅ **Documenter** les changements dans `audit/changelog/`
- ✅ **Supprimer** les fichiers de test temporaires
- ✅ **Résumer** les résultats obtenus
- ✅ **Préparer** la micro-étape suivante

## 🔧 **INFORMATIONS TECHNIQUES PROJET**

### Infrastructure Serveur (Ubuntu 22.04)

- **IP**: 51.91.145.255
- **Services**: Nginx + PM2 + PostgreSQL + Ollama
- **SSL**: Let's Encrypt auto-renewal
- **Monitoring**: PM2 + logs centralisés

### Backend Express (Port 8083)

- **Fichier**: /var/www/melyia/app-dev/server.js
- **PM2**: Process melyia-auth-dev
- **Base**: melyia_dev (PostgreSQL + pgvector)
- **Password DB**: QOZ9QyJd4YiufyzMj0eq7GgHV0sBrlSX

### Frontend React (Port 5173 dev)

- **Proxy**: /api/\* https://app-dev.melyia.com
- **Build**: dist/app/ et dist/landing/
- **Deploy**: GitHub Actions + webhooks

## 🧪 **COMPTES DE TEST DISPONIBLES**

### Compte Admin Principal

- **Email**: brice@melyia.com
- **Mot de passe**: password
- **Rôle**: admin
- **URL**: http://localhost:5173/admin/dashboard

### Autres comptes de test

- **Dentiste**: dentiste@melyia.com / test123
- **Patient**: patient@melyia.com / test123

## 🎯 **RÈGLES CRITIQUES - BONNES PRATIQUES OBLIGATOIRES**

### ⚡ ES MODULES vs COMMONJS - SYNTAXE CORRECTE

**RÈGLE ABSOLUE** : `package.json` contient `"type": "module"` donc **TOUJOURS utiliser ES Modules**

#### ✅ CORRECT : ES Modules (.mjs ou .js avec type: module)

```javascript
// ✅ IMPORTS ES MODULES
import axios from "axios";
import fs from "fs";
import path from "path";

// ✅ EXPORTS ES MODULES
export default function test() {}
export { functionName };
```

#### ❌ INCORRECT : CommonJS (CAUSE ERREURS)

```javascript
// ❌ NE JAMAIS UTILISER - CAUSE "require is not defined"
const axios = require("axios");
const fs = require("fs");
module.exports = function () {};
```

### 🖥️ POWERSHELL vs BASH - SYNTAXE CORRECTE

**CONTEXTE** : Utilisateur Windows avec PowerShell, pas Bash

#### ✅ CORRECT : PowerShell

```powershell
# ✅ SÉPARATEUR COMMANDES
cd client; npm run dev

# ✅ VARIABLES
$API_BASE = "https://app-dev.melyia.com"
```

#### ❌ INCORRECT : Bash (CAUSE ERREURS PowerShell)

```bash
# ❌ DOUBLE ESPERLUETTE - PowerShell ne supporte pas
cd client && npm run dev
```

### 🧪 SCRIPTS DE TEST - TEMPLATE OBLIGATOIRE

**TOUJOURS utiliser ce template pour les scripts de test** :

```javascript
// test-name.mjs - ✅ EXTENSION .mjs OBLIGATOIRE
import axios from "axios";

const API_BASE = "https://app-dev.melyia.com/api";

async function loginAdmin() {
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: "brice@melyia.com",
      password: "password",
    });

    if (response.data.success) {
      return response.data.token;
    }
    throw new Error("Login failed");
  } catch (error) {
    console.error("❌ Login error:", error.response?.data || error.message);
    return null;
  }
}

async function testAPI(token) {
  try {
    const response = await axios.get(`${API_BASE}/endpoint`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("✅ Success:", response.data);
    return true;
  } catch (error) {
    console.error("❌ Test failed:", error.response?.data || error.message);
    return false;
  }
}

async function runTests() {
  const token = await loginAdmin();
  if (!token) return;

  const result = await testAPI(token);
  console.log("🎯 Result:", result ? "✅ PASS" : "❌ FAIL");
}

runTests().catch(console.error);
```

### 🎯 CHECKLIST AVANT CHAQUE MODIFICATION

1. **✅ Syntaxe** : ES Modules (.mjs) ou PowerShell (;) ?
2. **✅ Interfaces** : TypeScript aligné avec backend ?
3. **✅ Tests** : Script de validation créé ?
4. **✅ Documentation** : Changelog mis à jour ?
5. **✅ Cleanup** : Fichiers temporaires supprimés ?

**CES RÈGLES SONT OBLIGATOIRES** - Elles évitent 90% des erreurs récurrentes !
