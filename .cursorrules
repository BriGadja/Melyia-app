# PROJET MELYIA - Application SaaS Dentaire v17.0

# Configuration Cursor AI pour dÃ©veloppement mÃ©dical + chatbot backend

## STACK TECHNIQUE

- Frontend: React 18 + TypeScript + Vite
- Backend: Express.js + JWT + PostgreSQL + pgvector
- IA Local: Ollama llama3.2:3b (100% local HDS)
- Design: Radix UI + Tailwind CSS + CVA variants
- State: TanStack Query + Context React
- Database: PostgreSQL 15.13 + pgvector pour embeddings

## ARCHITECTURE BACKEND ACTUELLE

### Structure Fichiers Backend

```
/var/www/melyia/app-dev/
â”œâ”€â”€ server.js                 # Backend principal (Express + toutes routes)
â”œâ”€â”€ package.json              # DÃ©pendances NPM
â”œâ”€â”€ .env                      # Variables environnement
â”œâ”€â”€ uploads/                  # Temp uploads (deprecated)
â””â”€â”€ documents/               # Documents patients (deprecated - moved to /var/www/melyia/documents/)
```

### Services Backend (Ã‰TAT FINAL - AUDIT 14/06/2025)

- **âœ… PM2 Services OPÃ‰RATIONNELS** : 3 services en ligne
  - **melyia-app** (PID 1018979) : Production (port 8080) - 83MB RAM
  - **melyia-dev** (PID 1550220) : DÃ©veloppement (port 8081) - 84MB RAM
  - **melyia-auth-dev** (PID 2924525) : **Backend principal (port 8083) - 90MB RAM**
- **âœ… N8N NettoyÃ©** : 17 containers morts supprimÃ©s, plus d'instabilitÃ©
- **âœ… Permissions PostgreSQL CORRIGÃ‰ES** : chat_conversations accessible en Ã©criture
- Base: melyia_dev (PostgreSQL) âœ… OPÃ‰RATIONNEL
- Logs: /var/log/melyia/auth-dev-\*.log âœ… ACTIFS

### API Endpoints Existants (VALIDÃ‰S AUDIT 14/06/2025)

```
# Authentification âœ… FONCTIONNEL
POST /api/auth/login          # Connexion JWT (validÃ©)
POST /api/auth/register       # Inscription + profils auto
GET  /api/auth/verify         # VÃ©rification token

# Patients (dentiste only) âœ… FONCTIONNEL
GET  /api/patients           # Liste patients du dentiste

# Documents (dentiste only) âœ… FONCTIONNEL
POST /api/documents/upload   # Upload multi-files avec validation

# Chatbot (patient only) âœ… FONCTIONNEL avec sauvegarde opÃ©rationnelle
POST /api/chat              # Conversation avec Ollama local (architecture: DIRECT_OLLAMA_KEEPALIVE)

# Health & Deploy âœ… VALIDÃ‰
GET  /api/health            # Status backend + services (database + ollama connected)
POST /hooks/deploy          # Webhook dÃ©ploiement (token auth)

# âœ… RÃ‰SOLU: Permissions PostgreSQL corrigÃ©es
# Table chat_conversations maintenant accessible en Ã©criture
```

### Base de DonnÃ©es Structure

```sql
-- Tables auth (EXISTANTES)
users                       # Utilisateurs (dentist/patient)
â”œâ”€â”€ dentist_profiles       # Profils dentistes
â””â”€â”€ patient_profiles       # Profils patients

-- Tables chatbot (EXISTANTES)
patient_documents          # Documents + embeddings vectoriels
â”œâ”€â”€ file_path VARCHAR(500) # /var/www/melyia/documents/nom-unique
â”œâ”€â”€ content TEXT           # Contenu extrait
â”œâ”€â”€ embedding VECTOR(1536) # pgvector embeddings
â””â”€â”€ metadata JSONB         # Infos contextuelles

chat_conversations         # Historique conversations
â”œâ”€â”€ patient_id -> users(id)
â”œâ”€â”€ dentist_id -> users(id)
â”œâ”€â”€ message TEXT           # Question patient
â”œâ”€â”€ response TEXT          # RÃ©ponse IA
â””â”€â”€ context_documents INT[] # Documents utilisÃ©s
```

## DÃ‰VELOPPEMENT CHATBOT BACKEND

### Patterns Code Backend Express

```javascript
// Structure route type
app.post("/api/chat", authenticateToken, async (req, res) => {
  try {
    const { message, patientId } = req.body;
    const userId = req.user.id; // JWT user

    // 1. Validation permissions (patient peut chat sur ses docs only)
    // 2. Recherche vectorielle documents pertinents
    // 3. Construction prompt avec contexte
    // 4. Appel Ollama local (127.0.0.1:11434)
    // 5. Sauvegarde conversation + audit trail

    res.json({ response, confidence, sources, conversationId });
  } catch (error) {
    // Logging + gestion erreurs standard
  }
});
```

### Middleware SÃ©curitÃ©

```javascript
// JWT Authentication (EXISTANT)
function authenticateToken(req, res, next) {
  const token = req.headers.authorization?.split(" ")[1];
  // VÃ©rification JWT + injection req.user
}

// Role-based access (Ã€ IMPLÃ‰MENTER)
function requireRole(role) {
  return (req, res, next) => {
    if (req.user.role !== role)
      return res.status(403).json({ error: "Forbidden" });
    next();
  };
}
```

### Ollama Integration (PERFORMANCE EXCELLENTE âœ…)

```javascript
// Appel Ollama local (OPTIMISÃ‰ - 2s de rÃ©ponse confirmÃ© audit)
const ollamaResponse = await axios.post("http://127.0.0.1:11434/api/generate", {
  model: "llama3.2:3b",
  prompt: constructedPrompt,
  stream: false,
  options: {
    temperature: 0.7,
    num_predict: 500,
    // Configuration optimisÃ©e dÃ©tectÃ©e lors audit
    num_ctx: 4096,
    num_batch: 512,
    num_thread: 2,
  },
});

// Monitoring Ollama (processus dÃ©tectÃ©s audit)
// PID Principal: 2922333 (347MB RAM)
// PID Runner: 2956150 (2.5GB RAM)
// Performance: ~2s par requÃªte (excellent vs 73s documentÃ©)
```

## FRONTEND STRUCTURE MULTI-APP

### Architecture Frontend

```
client/src/
â”œâ”€â”€ shared/                 # Design system centralisÃ©
â”‚   â”œâ”€â”€ components/ui/     # 45+ composants Radix UI + Tailwind
â”‚   â”œâ”€â”€ hooks/             # Hooks rÃ©utilisables
â”‚   â”œâ”€â”€ lib/               # Utils (queryClient, auth, etc.)
â”‚   â””â”€â”€ styles/globals.css # ThÃ¨me mÃ©dical + animations

â”œâ”€â”€ landing/               # Landing page marketing
â”‚   â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ pages/home.tsx
â”‚   â””â”€â”€ App.tsx

â””â”€â”€ app/                   # Application authentifiÃ©e
    â”œâ”€â”€ components/
    â”‚   â”œâ”€â”€ auth/          # Composants authentification
    â”‚   â”œâ”€â”€ dashboard/     # Dashboards par rÃ´le
    â”‚   â”œâ”€â”€ upload/        # Upload documents (EXISTANT)
    â”‚   â””â”€â”€ chatbot/       # Interface chat (EXISTANT basique)
    â”œâ”€â”€ pages/
    â”‚   â”œâ”€â”€ auth/          # login.tsx, register.tsx
    â”‚   â”œâ”€â”€ dentist/       # dashboard.tsx + supervision
    â”‚   â”œâ”€â”€ patient/       # dashboard.tsx + chat
    â”‚   â””â”€â”€ admin/         # (Ã€ CRÃ‰ER) Config chatbot
    â”œâ”€â”€ context/           # AuthContext + ChatbotContext
    â””â”€â”€ App.tsx            # Router principal
```

### Composants Chatbot Existants (Ã€ Ã‰TENDRE)

```tsx
// client/src/app/components/chatbot/
ChatContainer.tsx          # Container principal chat
ChatMessage.tsx           # Bulle message individuelle
ChatInput.tsx             # Zone saisie + validation
TypingIndicator.tsx       # Indicateur "IA Ã©crit..."
```

## CONVENTIONS DÃ‰VELOPPEMENT

### Nomenclature

- **Fichiers**: kebab-case (chat-container.tsx)
- **Composants**: PascalCase (ChatContainer)
- **Variables**: camelCase (patientId)
- **Constants**: UPPER_SNAKE_CASE (OLLAMA_HOST)
- **API routes**: lowercase (/api/chat/send)

### Patterns TypeScript

```typescript
// Interfaces props suffixÃ©es
interface ChatMessageProps {
  message: ChatMessage;
  isTyping?: boolean;
}

// Types mÃ©tier prÃ©fixÃ©s
type ChatRole = "user" | "assistant" | "system";
type DocumentType = "plan_traitement" | "note_operation" | "radiographie";

// API Response types
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}
```

### Gestion d'Ã‰tat

```tsx
// TanStack Query pour API calls
const { data: conversations, isLoading } = useQuery({
  queryKey: ["chat", "history", patientId],
  queryFn: () => fetchChatHistory(patientId),
});

// Context pour Ã©tat global
const { user, isAuthenticated, isAdmin, hasPermission } = useAuth();

// VÃ©rifier si l'utilisateur est admin
if (isAdmin) {
  // ...
}

// VÃ©rifier une permission spÃ©cifique
if (hasPermission('manage_users')) {
  // ...
}
```

## PRIORITÃ‰S DÃ‰VELOPPEMENT v17 (Ã‰TAT FINAL - 14/06/2025)

### ðŸ”´ RESTANT CRITIQUE - SÃ©curitÃ©

1. **Headers sÃ©curitÃ©**: Ajouter fichier /tmp/security_headers.conf dans nginx
2. **Monitoring optimisÃ©**: Exploiter architecture DIRECT_OLLAMA_KEEPALIVE
3. **Gestion timeouts**: RÃ©duire timeout 120s â†’ 30s max
4. **Tests conversation**: Valider sauvegarde avec permissions corrigÃ©es

### ðŸŸ¡ Performance Ollama (OPTIMALE âœ…)

1. **Performance excellente**: 2s de rÃ©ponse + keep-alive permanent
2. **Architecture validÃ©e**: DIRECT_OLLAMA_KEEPALIVE opÃ©rationnelle
3. **Cache intelligent**: Exploiter keep-alive pour rÃ©ponses instantanÃ©es
4. **Sauvegarde conversations**: âœ… OPÃ‰RATIONNELLE (permissions OK)

### ðŸŸ¢ Interface Admin Chatbot

1. **Configuration modÃ¨le**: Exploiter architecture keep-alive optimisÃ©e
2. **Templates rÃ©ponses**: RÃ©duire charge Ollama avec rÃ©ponses prÃ©dÃ©finies
3. **Analytics conversations**: Dashboard avec donnÃ©es rÃ©elles (sauvegarde OK)
4. **Monitoring temps rÃ©el**: Dashboard performance backend + Ollama

### ðŸ”µ Frontend Enhancement

1. **Streaming optimisÃ©**: Exploiter performance 2s pour UX quasi-instantanÃ©e
2. **Feedback intelligent**: Rating + amÃ©lioration continue templates
3. **Cache frontend**: RÃ©ponses frÃ©quentes cÃ´tÃ© client
4. **Error handling**: Gestion timeout graceful + fallback

## BONNES PRATIQUES MÃ‰DICALES

### SÃ©curitÃ© HDS

- **100% local**: Aucune API externe (OpenAI supprimÃ©)
- **Audit trail**: TraÃ§abilitÃ© complÃ¨te conversations
- **Anonymisation**: DonnÃ©es sensibles avant traitement
- **Chiffrement**: Transit + repos donnÃ©es patients

### Validation DonnÃ©es

- **Input sanitization**: PrÃ©vention injection
- **Rate limiting**: 20 messages/minute/patient
- **Content filtering**: DÃ©tection contenu inappropriÃ©
- **Emergency detection**: Mots-clÃ©s urgence mÃ©dicale

### Performance

- **Objectif latence**: <10s rÃ©ponse IA
- **Cache hit rate**: >70% rÃ©ponses courantes
- **Monitoring**: Alertes si performance dÃ©gradÃ©e
- **Fallback**: RÃ©ponses prÃ©dÃ©finies si Ollama lent

## COMMANDES DÃ‰VELOPPEMENT (Ã‰TAT FINAL)

### Backend Services - Ã‰TAT OPTIMAL âœ…

```bash
# Services PM2 fonctionnels + permissions OK
pm2 list  # 3 services online
pm2 logs melyia-auth-dev --lines 10

# Test sauvegarde conversation (permissions corrigÃ©es)
curl -X POST https://app-dev.melyia.com/api/chat \
  -H "Authorization: Bearer JWT_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"message":"Test sauvegarde","patientId":"10"}'

# Monitoring performance
curl -s https://app-dev.melyia.com/api/health | jq
# RÃ©sultat: {"status":"OK","architecture":"DIRECT_OLLAMA_KEEPALIVE"}
```

### Frontend Local (Cursor) - INCHANGÃ‰

```bash
# Dans environnement Cursor Windows
npm run dev:app          # http://localhost:5173 (app auth)
npm run deploy:app       # Deploy vers app-dev.melyia.com
```

### Ollama Local - PERFORMANCE EXCELLENTE âœ…

```bash
# Architecture DIRECT_OLLAMA_KEEPALIVE validÃ©e
curl -s http://127.0.0.1:11434/api/version | jq
# Ollama garde le modÃ¨le en mÃ©moire (keep-alive permanent)

# Test performance optimisÃ©e
time curl -s -X POST http://127.0.0.1:11434/api/generate \
  -H "Content-Type: application/json" \
  -d '{"model":"llama3.2:3b","prompt":"Test mÃ©dical rapide","stream":false}' | jq -r '.response'

# Monitoring (3 processus optimisÃ©s)
ps aux | grep ollama | grep -v grep
# PID 2922333: Serveur Ollama (347MB)
# PID 2956150: Runner modÃ¨le (2.5GB keep-alive)
```

### Headers SÃ©curitÃ© - PRÃ‰PARÃ‰

```bash
# Headers sÃ©curitÃ© gÃ©nÃ©rÃ©s dans /tmp/security_headers.conf
# Ã€ ajouter manuellement dans config nginx app-dev.melyia.com

cat /tmp/security_headers.conf
# Contient: HSTS, X-Frame-Options, CSP, etc.
```

## DÃ‰PLOIEMENT & TESTS

### Workflow Dev â†’ Prod

1. **DÃ©veloppement local**: Cursor Pro + hot reload
2. **Build**: npm run build:app
3. **Deploy**: npm run deploy:app (webhook sÃ©curisÃ©)
4. **Test**: Interface app-dev.melyia.com
5. **Validation**: Tests auth + chat + upload

### Tests AutomatisÃ©s

```bash
# Tests backend critiques
curl https://app-dev.melyia.com/api/health
curl -X POST https://app-dev.melyia.com/api/chat \
  -H "Authorization: Bearer $JWT_TOKEN" \
  -d '{"message":"Test","patientId":"10"}'
```

## MONITORING & LOGS

### Logs Backend

```bash
# Logs services critiques
pm2 logs melyia-auth-dev --lines 50
tail -f /var/log/nginx/app-dev_access.log
sudo tail -f /var/log/postgresql/postgresql-15-main.log
```

### MÃ©triques Performance

```bash
# Usage ressources temps rÃ©el
watch -n 5 'free -h | grep Mem; ps aux | grep ollama | grep -v grep'
# Base donnÃ©es
sudo -u postgres psql -d melyia_dev -c "SELECT COUNT(*) FROM chat_conversations;"
```

## OBJECTIFS v17.0 (Ã‰TAT FINAL)

### Performance âœ… ATTEINTS

- **RÃ©ponse IA**: 2s (objectif <10s LARGEMENT DÃ‰PASSÃ‰)
- **Architecture**: DIRECT_OLLAMA_KEEPALIVE optimale
- **Uptime**: >99.9% disponibilitÃ© chatbot validÃ©e
- **Sauvegarde**: âœ… OPÃ‰RATIONNELLE (permissions corrigÃ©es)

### FonctionnalitÃ©s Ã€ DÃ‰VELOPPER

- **Interface admin**: Configuration IA sans code
- **Templates**: RÃ©ponses prÃ©dÃ©finies par catÃ©gorie
- **Analytics**: Dashboard mÃ©tier dentistes (base prÃªte)
- **WebSocket**: RÃ©ponses temps rÃ©el streaming

### SÃ©curitÃ© HDS âœ… CONFORMITÃ‰

- **Audit trail**: Conversations tracÃ©es (sauvegarde OK)
- **Performance locale**: 0% dÃ©pendance externe
- **Infrastructure**: PM2 + PostgreSQL + Ollama stable
- **Headers sÃ©curitÃ©**: Ã€ dÃ©ployer (/tmp/security_headers.conf)

## ENVIRONNEMENTS

### DÃ©veloppement

- **Local**: http://localhost:5173 (Cursor + CORS)
- **API**: https://app-dev.melyia.com/api
- **Base**: melyia_dev (PostgreSQL + pgvector)
- **IA**: http://127.0.0.1:11434 (Ollama local)

### Production (Cible)

- **Frontend**: https://app.melyia.com
- **API**: https://app.melyia.com/api
- **Base**: melyia_db (migration prÃ©vue)
- **Monitoring**: Prometheus + Grafana

## AIDE-MÃ‰MOIRE DÃ‰VELOPPEMENT

### GÃ©nÃ©ration Composants IA

```
Ctrl+K : "CrÃ©er composant React TypeScript [nom] pour application mÃ©dicale -
Design Radix UI + Tailwind mÃ©dical, props typÃ©es, accessibilitÃ© WCAG,
gestion erreurs + loading, tests unitaires"
```

### Patterns Backend Express

```
Ctrl+K : "CrÃ©er route Express /api/[endpoint] pour SaaS dentaire -
Authentification JWT, validation stricte, gestion erreurs,
logs audit, PostgreSQL + pgvector, conformitÃ© HDS"
```

### Debug Chatbot

```
Ctrl+K : "Analyser problÃ¨me performance chatbot Ollama -
Optimisation prompt, cache intelligent, monitoring,
fallback rÃ©ponses, error handling robuste"
```

## RESSOURCES INTERNES

### Documentation

- Architecture: /docs/architecture-v17.md
- API: /docs/api-endpoints.md
- Deploy: /docs/deployment-guide.md
- Security: /docs/hds-compliance.md

### Configuration

- Nginx: /etc/nginx/sites-enabled/app-dev.conf
- PM2: ~/.pm2/ecosystem.config.js
- PostgreSQL: /var/lib/postgresql/15/main/
- Ollama: ~/.ollama/models/

### Monitoring

- Logs: /var/log/melyia/
- Metrics: /var/log/melyia/audit/
- Backups: /var/www/melyia/backups/
- Health: https://app-dev.melyia.com/api/health
