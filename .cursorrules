# PROJET MELYIA - Full Stack avec Vision Complète v25.0

##  ARCHITECTURE COMPLÈTE DISPONIBLE

Cursor a maintenant accès à TOUTE l'infrastructure :
-  Frontend React (client/)
-  Backend Express (server/backend/)  
-  Configs Nginx (server/configs/nginx/)
-  Configs PM2 (server/configs/pm2/)
-  Schémas PostgreSQL (server/configs/postgresql/)
-  Logs serveur (server/logs/)
-  Documentation (docs/)

##  CONTEXTE DÉVELOPPEMENT

### Infrastructure Serveur (Ubuntu 22.04)
- **IP**: 51.91.145.255
- **Services**: Nginx + PM2 + PostgreSQL + Ollama
- **SSL**: Let's Encrypt auto-renewal
- **Monitoring**: PM2 + logs centralisés

### Backend Express (Port 8083)
- **Fichier**: server/backend/server.js
- **PM2**: Process auth-dev  
- **Base**: melyia_app_dev (PostgreSQL + pgvector)
- **API**: /api/auth/* /api/patients /api/chat /api/documents/*

### Frontend React (Port 5173 dev)
- **Proxy**: /api/*  https://app-dev.melyia.com
- **Build**: dist/app/ et dist/landing/
- **Deploy**: GitHub Actions + webhooks

### IA Locale
- **Ollama**: llama3.2:3b sur port 11434
- **Architecture**: DIRECT_OLLAMA_KEEPALIVE
- **Usage**: Chatbot médical 100% local

##  DIRECTIVES CURSOR

Cursor doit maintenant :

1. **Analyser les configs serveur** avant de proposer des solutions
2. **Comprendre la stack complète** (nginx + express + postgres + ollama)  
3. **Proposer des modifications cohérentes** sur frontend ET backend
4. **Tenir compte des contraintes serveur** (PM2, SSL, etc.)
5. **Suggérer des améliorations full-stack**

### Exemples de problèmes résolus avec vision complète :
- Erreur nginx  Cursor peut voir la config et proposer une correction
- Problème API  Cursor voit server.js ET le frontend
- Erreur base  Cursor connaît le schéma PostgreSQL
- Déploiement  Cursor comprend le workflow complet

##  RÉFÉRENCES RAPIDES

### Fichiers backend critiques :
- `server/backend/server.js` - Code serveur principal
- `server/configs/nginx/*.conf` - Configurations proxy
- `server/configs/postgresql/*.sql` - Schémas BDD

### Commandes serveur utiles :
```bash
pm2 restart auth-dev        # Redémarre backend
sudo nginx -t && sudo systemctl reload nginx  # Test + reload nginx
sudo -u postgres psql melyia_app_dev         # Console BDD
```

##  WORKFLOW OPTIMAL

1. **Problème détecté**  Cursor analyse frontend + backend + configs
2. **Solution proposée**  Cohérente avec toute l'architecture  
3. **Implémentation**  Frontend local + instructions serveur
4. **Test**  Via proxy + vérification logs
5. **Deploy**  Scripts automatisés

Cursor peut maintenant faire du "vibe coding" full-stack intelligent ! 
